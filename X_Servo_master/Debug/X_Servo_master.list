
X_Servo_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000275c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002844  08002844  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002844  08002844  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002844  08002844  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002844  08002844  00012844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002848  08002848  00012848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800284c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002858  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002858  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a63b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002528  00000000  00000000  0002a66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  0002cb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002d810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012011  00000000  00000000  0002e330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f59f  00000000  00000000  00040341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006267b  00000000  00000000  0004f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b1f5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a54  00000000  00000000  000b1fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002804 	.word	0x08002804

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002804 	.word	0x08002804

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	0018      	movs	r0, r3
 800022a:	230c      	movs	r3, #12
 800022c:	001a      	movs	r2, r3
 800022e:	2100      	movs	r1, #0
 8000230:	f002 fae0 	bl	80027f4 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000234:	4b2c      	ldr	r3, [pc, #176]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000236:	4a2d      	ldr	r2, [pc, #180]	; (80002ec <MX_ADC_Init+0xcc>)
 8000238:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <MX_ADC_Init+0xc8>)
 800023c:	2200      	movs	r2, #0
 800023e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000242:	2200      	movs	r2, #0
 8000244:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000246:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000248:	2200      	movs	r2, #0
 800024a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <MX_ADC_Init+0xc8>)
 800024e:	2201      	movs	r2, #1
 8000250:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000252:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000254:	2208      	movs	r2, #8
 8000256:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <MX_ADC_Init+0xc8>)
 800025a:	2200      	movs	r2, #0
 800025c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800025e:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000260:	2200      	movs	r2, #0
 8000262:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000264:	4b20      	ldr	r3, [pc, #128]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000266:	2201      	movs	r2, #1
 8000268:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800026a:	4b1f      	ldr	r3, [pc, #124]	; (80002e8 <MX_ADC_Init+0xc8>)
 800026c:	2200      	movs	r2, #0
 800026e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000270:	4b1d      	ldr	r3, [pc, #116]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000272:	22c2      	movs	r2, #194	; 0xc2
 8000274:	32ff      	adds	r2, #255	; 0xff
 8000276:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000278:	4b1b      	ldr	r3, [pc, #108]	; (80002e8 <MX_ADC_Init+0xc8>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800027e:	4b1a      	ldr	r3, [pc, #104]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000280:	2224      	movs	r2, #36	; 0x24
 8000282:	2100      	movs	r1, #0
 8000284:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000286:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC_Init+0xc8>)
 8000288:	2201      	movs	r2, #1
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800028c:	4b16      	ldr	r3, [pc, #88]	; (80002e8 <MX_ADC_Init+0xc8>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 fe7c 	bl	8000f8c <HAL_ADC_Init>
 8000294:	1e03      	subs	r3, r0, #0
 8000296:	d001      	beq.n	800029c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000298:	f000 fade 	bl	8000858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2204      	movs	r2, #4
 80002a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2280      	movs	r2, #128	; 0x80
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2201      	movs	r2, #1
 80002ae:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002b0:	1d3a      	adds	r2, r7, #4
 80002b2:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002b4:	0011      	movs	r1, r2
 80002b6:	0018      	movs	r0, r3
 80002b8:	f000 ffa8 	bl	800120c <HAL_ADC_ConfigChannel>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80002c0:	f000 faca 	bl	8000858 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2205      	movs	r2, #5
 80002c8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80002ca:	1d3a      	adds	r2, r7, #4
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <MX_ADC_Init+0xc8>)
 80002ce:	0011      	movs	r1, r2
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 ff9b 	bl	800120c <HAL_ADC_ConfigChannel>
 80002d6:	1e03      	subs	r3, r0, #0
 80002d8:	d001      	beq.n	80002de <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80002da:	f000 fabd 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	20000028 	.word	0x20000028
 80002ec:	40012400 	.word	0x40012400

080002f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002f0:	b590      	push	{r4, r7, lr}
 80002f2:	b08b      	sub	sp, #44	; 0x2c
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f8:	2414      	movs	r4, #20
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	0018      	movs	r0, r3
 80002fe:	2314      	movs	r3, #20
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f002 fa76 	bl	80027f4 <memset>
  if(adcHandle->Instance==ADC1)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a19      	ldr	r2, [pc, #100]	; (8000374 <HAL_ADC_MspInit+0x84>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d12b      	bne.n	800036a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000312:	4b19      	ldr	r3, [pc, #100]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000314:	699a      	ldr	r2, [r3, #24]
 8000316:	4b18      	ldr	r3, [pc, #96]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000318:	2180      	movs	r1, #128	; 0x80
 800031a:	0089      	lsls	r1, r1, #2
 800031c:	430a      	orrs	r2, r1
 800031e:	619a      	str	r2, [r3, #24]
 8000320:	4b15      	ldr	r3, [pc, #84]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000322:	699a      	ldr	r2, [r3, #24]
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4013      	ands	r3, r2
 800032a:	613b      	str	r3, [r7, #16]
 800032c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000330:	695a      	ldr	r2, [r3, #20]
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <HAL_ADC_MspInit+0x88>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	0289      	lsls	r1, r1, #10
 8000338:	430a      	orrs	r2, r1
 800033a:	615a      	str	r2, [r3, #20]
 800033c:	4b0e      	ldr	r3, [pc, #56]	; (8000378 <HAL_ADC_MspInit+0x88>)
 800033e:	695a      	ldr	r2, [r3, #20]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	029b      	lsls	r3, r3, #10
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800034a:	193b      	adds	r3, r7, r4
 800034c:	2230      	movs	r2, #48	; 0x30
 800034e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000350:	193b      	adds	r3, r7, r4
 8000352:	2203      	movs	r2, #3
 8000354:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	193b      	adds	r3, r7, r4
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	193a      	adds	r2, r7, r4
 800035e:	2390      	movs	r3, #144	; 0x90
 8000360:	05db      	lsls	r3, r3, #23
 8000362:	0011      	movs	r1, r2
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f8fb 	bl	8001560 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b00b      	add	sp, #44	; 0x2c
 8000370:	bd90      	pop	{r4, r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	40012400 	.word	0x40012400
 8000378:	40021000 	.word	0x40021000

0800037c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b084      	sub	sp, #16
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000386:	6959      	ldr	r1, [r3, #20]
 8000388:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <LL_AHB1_GRP1_EnableClock+0x28>)
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	430a      	orrs	r2, r1
 800038e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000390:	4b04      	ldr	r3, [pc, #16]	; (80003a4 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	4013      	ands	r3, r2
 8000398:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800039a:	68fb      	ldr	r3, [r7, #12]
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b004      	add	sp, #16
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80003ac:	2380      	movs	r3, #128	; 0x80
 80003ae:	029b      	lsls	r3, r3, #10
 80003b0:	0018      	movs	r0, r3
 80003b2:	f7ff ffe3 	bl	800037c <LL_AHB1_GRP1_EnableClock>

}
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <MX_I2C1_Init+0x78>)
 80003c2:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <MX_I2C1_Init+0x7c>)
 80003c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80003c6:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_I2C1_Init+0x78>)
 80003c8:	4a1c      	ldr	r2, [pc, #112]	; (800043c <MX_I2C1_Init+0x80>)
 80003ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <MX_I2C1_Init+0x78>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_I2C1_Init+0x78>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_I2C1_Init+0x78>)
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003de:	4b15      	ldr	r3, [pc, #84]	; (8000434 <MX_I2C1_Init+0x78>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_I2C1_Init+0x78>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ea:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_I2C1_Init+0x78>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <MX_I2C1_Init+0x78>)
 80003f2:	2280      	movs	r2, #128	; 0x80
 80003f4:	0292      	lsls	r2, r2, #10
 80003f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_I2C1_Init+0x78>)
 80003fa:	0018      	movs	r0, r3
 80003fc:	f001 fa20 	bl	8001840 <HAL_I2C_Init>
 8000400:	1e03      	subs	r3, r0, #0
 8000402:	d001      	beq.n	8000408 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000404:	f000 fa28 	bl	8000858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000408:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <MX_I2C1_Init+0x78>)
 800040a:	2100      	movs	r1, #0
 800040c:	0018      	movs	r0, r3
 800040e:	f001 faad 	bl	800196c <HAL_I2CEx_ConfigAnalogFilter>
 8000412:	1e03      	subs	r3, r0, #0
 8000414:	d001      	beq.n	800041a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000416:	f000 fa1f 	bl	8000858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_I2C1_Init+0x78>)
 800041c:	2100      	movs	r1, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f001 faf0 	bl	8001a04 <HAL_I2CEx_ConfigDigitalFilter>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000428:	f000 fa16 	bl	8000858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000068 	.word	0x20000068
 8000438:	40005400 	.word	0x40005400
 800043c:	2000090e 	.word	0x2000090e

08000440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b08b      	sub	sp, #44	; 0x2c
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000448:	2414      	movs	r4, #20
 800044a:	193b      	adds	r3, r7, r4
 800044c:	0018      	movs	r0, r3
 800044e:	2314      	movs	r3, #20
 8000450:	001a      	movs	r2, r3
 8000452:	2100      	movs	r1, #0
 8000454:	f002 f9ce 	bl	80027f4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <HAL_I2C_MspInit+0x94>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d133      	bne.n	80004ca <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <HAL_I2C_MspInit+0x98>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b1c      	ldr	r3, [pc, #112]	; (80004d8 <HAL_I2C_MspInit+0x98>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0289      	lsls	r1, r1, #10
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <HAL_I2C_MspInit+0x98>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	4013      	ands	r3, r2
 800047a:	613b      	str	r3, [r7, #16]
 800047c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	22c0      	movs	r2, #192	; 0xc0
 8000482:	00d2      	lsls	r2, r2, #3
 8000484:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000486:	0021      	movs	r1, r4
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2212      	movs	r2, #18
 800048c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	187b      	adds	r3, r7, r1
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000494:	187b      	adds	r3, r7, r1
 8000496:	2203      	movs	r2, #3
 8000498:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800049a:	187b      	adds	r3, r7, r1
 800049c:	2204      	movs	r2, #4
 800049e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	187a      	adds	r2, r7, r1
 80004a2:	2390      	movs	r3, #144	; 0x90
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	0011      	movs	r1, r2
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 f859 	bl	8001560 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004ae:	4b0a      	ldr	r3, [pc, #40]	; (80004d8 <HAL_I2C_MspInit+0x98>)
 80004b0:	69da      	ldr	r2, [r3, #28]
 80004b2:	4b09      	ldr	r3, [pc, #36]	; (80004d8 <HAL_I2C_MspInit+0x98>)
 80004b4:	2180      	movs	r1, #128	; 0x80
 80004b6:	0389      	lsls	r1, r1, #14
 80004b8:	430a      	orrs	r2, r1
 80004ba:	61da      	str	r2, [r3, #28]
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_I2C_MspInit+0x98>)
 80004be:	69da      	ldr	r2, [r3, #28]
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	039b      	lsls	r3, r3, #14
 80004c4:	4013      	ands	r3, r2
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b00b      	add	sp, #44	; 0x2c
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	40005400 	.word	0x40005400
 80004d8:	40021000 	.word	0x40021000

080004dc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <LL_RCC_HSI_Enable+0x18>)
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <LL_RCC_HSI_Enable+0x18>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	601a      	str	r2, [r3, #0]
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	40021000 	.word	0x40021000

080004f8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <LL_RCC_HSI_IsReady+0x1c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2202      	movs	r2, #2
 8000502:	4013      	ands	r3, r2
 8000504:	3b02      	subs	r3, #2
 8000506:	425a      	negs	r2, r3
 8000508:	4153      	adcs	r3, r2
 800050a:	b2db      	uxtb	r3, r3
}
 800050c:	0018      	movs	r0, r3
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	46c0      	nop			; (mov r8, r8)
 8000514:	40021000 	.word	0x40021000

08000518 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000520:	4b06      	ldr	r3, [pc, #24]	; (800053c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	22f8      	movs	r2, #248	; 0xf8
 8000526:	4393      	bics	r3, r2
 8000528:	0019      	movs	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	00da      	lsls	r2, r3, #3
 800052e:	4b03      	ldr	r3, [pc, #12]	; (800053c <LL_RCC_HSI_SetCalibTrimming+0x24>)
 8000530:	430a      	orrs	r2, r1
 8000532:	601a      	str	r2, [r3, #0]
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000

08000540 <LL_RCC_HSI14_Enable>:
  * @brief  Enable HSI14
  * @rmtoll CR2          HSI14ON       LL_RCC_HSI14_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_Enable(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI14ON);
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <LL_RCC_HSI14_Enable+0x18>)
 8000546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <LL_RCC_HSI14_Enable+0x18>)
 800054a:	2101      	movs	r1, #1
 800054c:	430a      	orrs	r2, r1
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <LL_RCC_HSI14_IsReady>:
  * @brief  Check if HSI14 oscillator Ready
  * @rmtoll CR2          HSI14RDY      LL_RCC_HSI14_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI14_IsReady(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI14RDY) == (RCC_CR2_HSI14RDY));
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <LL_RCC_HSI14_IsReady+0x1c>)
 8000562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000564:	2202      	movs	r2, #2
 8000566:	4013      	ands	r3, r2
 8000568:	3b02      	subs	r3, #2
 800056a:	425a      	negs	r2, r3
 800056c:	4153      	adcs	r3, r2
 800056e:	b2db      	uxtb	r3, r3
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <LL_RCC_HSI14_EnableADCControl>:
  * @brief  ADC interface can turn on the HSI14 oscillator
  * @rmtoll CR2          HSI14DIS      LL_RCC_HSI14_EnableADCControl
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_EnableADCControl(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR2, RCC_CR2_HSI14DIS);
 8000580:	4b04      	ldr	r3, [pc, #16]	; (8000594 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8000582:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <LL_RCC_HSI14_EnableADCControl+0x18>)
 8000586:	2104      	movs	r1, #4
 8000588:	438a      	bics	r2, r1
 800058a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40021000 	.word	0x40021000

08000598 <LL_RCC_HSI14_SetCalibTrimming>:
  * @rmtoll CR2          HSI14TRIM     LL_RCC_HSI14_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0xFF
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI14_SetCalibTrimming(uint32_t Value)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR2, RCC_CR2_HSI14TRIM, Value << RCC_POSITION_HSI14TRIM);
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80005a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005a4:	22f8      	movs	r2, #248	; 0xf8
 80005a6:	4393      	bics	r3, r2
 80005a8:	0019      	movs	r1, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	00da      	lsls	r2, r3, #3
 80005ae:	4b03      	ldr	r3, [pc, #12]	; (80005bc <LL_RCC_HSI14_SetCalibTrimming+0x24>)
 80005b0:	430a      	orrs	r2, r1
 80005b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	b002      	add	sp, #8
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40021000 	.word	0x40021000

080005c0 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80005c8:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <LL_RCC_SetSysClkSource+0x24>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2203      	movs	r2, #3
 80005ce:	4393      	bics	r3, r2
 80005d0:	0019      	movs	r1, r3
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <LL_RCC_SetSysClkSource+0x24>)
 80005d4:	687a      	ldr	r2, [r7, #4]
 80005d6:	430a      	orrs	r2, r1
 80005d8:	605a      	str	r2, [r3, #4]
}
 80005da:	46c0      	nop			; (mov r8, r8)
 80005dc:	46bd      	mov	sp, r7
 80005de:	b002      	add	sp, #8
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40021000 	.word	0x40021000

080005e8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005ec:	4b03      	ldr	r3, [pc, #12]	; (80005fc <LL_RCC_GetSysClkSource+0x14>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	220c      	movs	r2, #12
 80005f2:	4013      	ands	r3, r2
}
 80005f4:	0018      	movs	r0, r3
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	40021000 	.word	0x40021000

08000600 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <LL_RCC_SetAHBPrescaler+0x24>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	22f0      	movs	r2, #240	; 0xf0
 800060e:	4393      	bics	r3, r2
 8000610:	0019      	movs	r1, r3
 8000612:	4b04      	ldr	r3, [pc, #16]	; (8000624 <LL_RCC_SetAHBPrescaler+0x24>)
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	430a      	orrs	r2, r1
 8000618:	605a      	str	r2, [r3, #4]
}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b002      	add	sp, #8
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	40021000 	.word	0x40021000

08000628 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000632:	685b      	ldr	r3, [r3, #4]
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <LL_RCC_SetAPB1Prescaler+0x28>)
 8000636:	4013      	ands	r3, r2
 8000638:	0019      	movs	r1, r3
 800063a:	4b04      	ldr	r3, [pc, #16]	; (800064c <LL_RCC_SetAPB1Prescaler+0x24>)
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	430a      	orrs	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000
 8000650:	fffff8ff 	.word	0xfffff8ff

08000654 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <LL_RCC_SetUSARTClockSource+0x30>)
 800065e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	0e12      	lsrs	r2, r2, #24
 8000664:	2103      	movs	r1, #3
 8000666:	4091      	lsls	r1, r2
 8000668:	000a      	movs	r2, r1
 800066a:	43d2      	mvns	r2, r2
 800066c:	401a      	ands	r2, r3
 800066e:	0011      	movs	r1, r2
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	021b      	lsls	r3, r3, #8
 8000674:	0a1a      	lsrs	r2, r3, #8
 8000676:	4b03      	ldr	r3, [pc, #12]	; (8000684 <LL_RCC_SetUSARTClockSource+0x30>)
 8000678:	430a      	orrs	r2, r1
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800067c:	46c0      	nop			; (mov r8, r8)
 800067e:	46bd      	mov	sp, r7
 8000680:	b002      	add	sp, #8
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021000 	.word	0x40021000

08000688 <LL_RCC_SetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_I2C1_CLKSOURCE_SYSCLK
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, RCC_CFGR3_I2C1SW, I2CxSource);
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <LL_RCC_SetI2CClockSource+0x24>)
 8000692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000694:	2210      	movs	r2, #16
 8000696:	4393      	bics	r3, r2
 8000698:	0019      	movs	r1, r3
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <LL_RCC_SetI2CClockSource+0x24>)
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	430a      	orrs	r2, r1
 80006a0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40021000 	.word	0x40021000

080006b0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80006b4:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <LL_RCC_PLL_Enable+0x18>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <LL_RCC_PLL_Enable+0x18>)
 80006ba:	2180      	movs	r1, #128	; 0x80
 80006bc:	0449      	lsls	r1, r1, #17
 80006be:	430a      	orrs	r2, r1
 80006c0:	601a      	str	r2, [r3, #0]
}
 80006c2:	46c0      	nop			; (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <LL_RCC_PLL_IsReady+0x24>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	2380      	movs	r3, #128	; 0x80
 80006d6:	049b      	lsls	r3, r3, #18
 80006d8:	4013      	ands	r3, r2
 80006da:	22fe      	movs	r2, #254	; 0xfe
 80006dc:	0612      	lsls	r2, r2, #24
 80006de:	4694      	mov	ip, r2
 80006e0:	4463      	add	r3, ip
 80006e2:	425a      	negs	r2, r3
 80006e4:	4153      	adcs	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
}
 80006e8:	0018      	movs	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80006fe:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	4a0e      	ldr	r2, [pc, #56]	; (800073c <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000704:	4013      	ands	r3, r2
 8000706:	0019      	movs	r1, r3
 8000708:	687a      	ldr	r2, [r7, #4]
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	401a      	ands	r2, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	431a      	orrs	r2, r3
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000716:	430a      	orrs	r2, r1
 8000718:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 800071a:	4b07      	ldr	r3, [pc, #28]	; (8000738 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	220f      	movs	r2, #15
 8000720:	4393      	bics	r3, r2
 8000722:	0019      	movs	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	220f      	movs	r2, #15
 8000728:	401a      	ands	r2, r3
 800072a:	4b03      	ldr	r3, [pc, #12]	; (8000738 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 800072c:	430a      	orrs	r2, r1
 800072e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b002      	add	sp, #8
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	ffc2ffff 	.word	0xffc2ffff

08000740 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LL_FLASH_SetLatency+0x24>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2201      	movs	r2, #1
 800074e:	4393      	bics	r3, r2
 8000750:	0019      	movs	r1, r3
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <LL_FLASH_SetLatency+0x24>)
 8000754:	687a      	ldr	r2, [r7, #4]
 8000756:	430a      	orrs	r2, r1
 8000758:	601a      	str	r2, [r3, #0]
}
 800075a:	46c0      	nop			; (mov r8, r8)
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	40022000 	.word	0x40022000

08000768 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <LL_FLASH_GetLatency+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2201      	movs	r2, #1
 8000772:	4013      	ands	r3, r2
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40022000 	.word	0x40022000

08000780 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000784:	f000 fba8 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000788:	f000 f810 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078c:	f7ff fe0c 	bl	80003a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000790:	f7ff fe14 	bl	80003bc <MX_I2C1_Init>
  MX_TIM3_Init();
 8000794:	f000 f9aa 	bl	8000aec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000798:	f000 faf6 	bl	8000d88 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800079c:	f000 fa50 	bl	8000c40 <MX_TIM17_Init>
  MX_ADC_Init();
 80007a0:	f7ff fd3e 	bl	8000220 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  Motor_Init();
 80007a4:	f001 ffec 	bl	8002780 <Motor_Init>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x28>
	...

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 80007b0:	2001      	movs	r0, #1
 80007b2:	f7ff ffc5 	bl	8000740 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_1)
 80007b6:	46c0      	nop			; (mov r8, r8)
 80007b8:	f7ff ffd6 	bl	8000768 <LL_FLASH_GetLatency>
 80007bc:	0003      	movs	r3, r0
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d1fa      	bne.n	80007b8 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80007c2:	f7ff fe8b 	bl	80004dc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	f7ff fe96 	bl	80004f8 <LL_RCC_HSI_IsReady>
 80007cc:	0003      	movs	r3, r0
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d1fa      	bne.n	80007c8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007d2:	2010      	movs	r0, #16
 80007d4:	f7ff fea0 	bl	8000518 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI14_Enable();
 80007d8:	f7ff feb2 	bl	8000540 <LL_RCC_HSI14_Enable>

   /* Wait till HSI14 is ready */
  while(LL_RCC_HSI14_IsReady() != 1)
 80007dc:	46c0      	nop			; (mov r8, r8)
 80007de:	f7ff febd 	bl	800055c <LL_RCC_HSI14_IsReady>
 80007e2:	0003      	movs	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d1fa      	bne.n	80007de <SystemClock_Config+0x32>
  {

  }
  LL_RCC_HSI14_SetCalibTrimming(16);
 80007e8:	2010      	movs	r0, #16
 80007ea:	f7ff fed5 	bl	8000598 <LL_RCC_HSI14_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_12);
 80007ee:	23a0      	movs	r3, #160	; 0xa0
 80007f0:	039b      	lsls	r3, r3, #14
 80007f2:	0019      	movs	r1, r3
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ff7d 	bl	80006f4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80007fa:	f7ff ff59 	bl	80006b0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	f7ff ff64 	bl	80006cc <LL_RCC_PLL_IsReady>
 8000804:	0003      	movs	r3, r0
 8000806:	2b01      	cmp	r3, #1
 8000808:	d1fa      	bne.n	8000800 <SystemClock_Config+0x54>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800080a:	2000      	movs	r0, #0
 800080c:	f7ff fef8 	bl	8000600 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff ff09 	bl	8000628 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000816:	2002      	movs	r0, #2
 8000818:	f7ff fed2 	bl	80005c0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	f7ff fee3 	bl	80005e8 <LL_RCC_GetSysClkSource>
 8000822:	0003      	movs	r3, r0
 8000824:	2b08      	cmp	r3, #8
 8000826:	d1fa      	bne.n	800081e <SystemClock_Config+0x72>
  {

  }
  LL_SetSystemCoreClock(48000000);
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <SystemClock_Config+0xa8>)
 800082a:	0018      	movs	r0, r3
 800082c:	f001 ff7c 	bl	8002728 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000830:	2003      	movs	r0, #3
 8000832:	f000 fb65 	bl	8000f00 <HAL_InitTick>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800083a:	f000 f80d 	bl	8000858 <Error_Handler>
  }
  LL_RCC_HSI14_EnableADCControl();
 800083e:	f7ff fe9d 	bl	800057c <LL_RCC_HSI14_EnableADCControl>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000842:	2000      	movs	r0, #0
 8000844:	f7ff ff06 	bl	8000654 <LL_RCC_SetUSARTClockSource>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff ff1d 	bl	8000688 <LL_RCC_SetI2CClockSource>
}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	02dc6c00 	.word	0x02dc6c00

08000858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
}
 800085e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000860:	e7fe      	b.n	8000860 <Error_Handler+0x8>
	...

08000864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x44>)
 800086c:	699a      	ldr	r2, [r3, #24]
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_MspInit+0x44>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	619a      	str	r2, [r3, #24]
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x44>)
 8000878:	699b      	ldr	r3, [r3, #24]
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <HAL_MspInit+0x44>)
 8000884:	69da      	ldr	r2, [r3, #28]
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x44>)
 8000888:	2180      	movs	r1, #128	; 0x80
 800088a:	0549      	lsls	r1, r1, #21
 800088c:	430a      	orrs	r2, r1
 800088e:	61da      	str	r2, [r3, #28]
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_MspInit+0x44>)
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	055b      	lsls	r3, r3, #21
 8000898:	4013      	ands	r3, r2
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b002      	add	sp, #8
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d0:	f000 fb4a 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <LL_AHB1_GRP1_EnableClock>:
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <LL_AHB1_GRP1_EnableClock+0x28>)
 80008ee:	6959      	ldr	r1, [r3, #20]
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <LL_AHB1_GRP1_EnableClock+0x28>)
 80008f2:	687a      	ldr	r2, [r7, #4]
 80008f4:	430a      	orrs	r2, r1
 80008f6:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <LL_AHB1_GRP1_EnableClock+0x28>)
 80008fa:	695b      	ldr	r3, [r3, #20]
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4013      	ands	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000902:	68fb      	ldr	r3, [r7, #12]
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b004      	add	sp, #16
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40021000 	.word	0x40021000

08000910 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <LL_APB1_GRP1_EnableClock+0x28>)
 800091a:	69d9      	ldr	r1, [r3, #28]
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <LL_APB1_GRP1_EnableClock+0x28>)
 800091e:	687a      	ldr	r2, [r7, #4]
 8000920:	430a      	orrs	r2, r1
 8000922:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <LL_APB1_GRP1_EnableClock+0x28>)
 8000926:	69db      	ldr	r3, [r3, #28]
 8000928:	687a      	ldr	r2, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	b004      	add	sp, #16
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40021000 	.word	0x40021000

0800093c <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <LL_APB1_GRP2_EnableClock+0x28>)
 8000946:	6999      	ldr	r1, [r3, #24]
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <LL_APB1_GRP2_EnableClock+0x28>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	430a      	orrs	r2, r1
 800094e:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <LL_APB1_GRP2_EnableClock+0x28>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	687a      	ldr	r2, [r7, #4]
 8000956:	4013      	ands	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b004      	add	sp, #16
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40021000 	.word	0x40021000

08000968 <LL_TIM_EnableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_EnableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableARRPreload(TIM_TypeDef *TIMx)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	431a      	orrs	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	46c0      	nop			; (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}

08000984 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d01e      	beq.n	80009d2 <LL_TIM_OC_DisableFast+0x4e>
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2b04      	cmp	r3, #4
 8000998:	d019      	beq.n	80009ce <LL_TIM_OC_DisableFast+0x4a>
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b10      	cmp	r3, #16
 800099e:	d014      	beq.n	80009ca <LL_TIM_OC_DisableFast+0x46>
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	2b40      	cmp	r3, #64	; 0x40
 80009a4:	d00f      	beq.n	80009c6 <LL_TIM_OC_DisableFast+0x42>
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	2380      	movs	r3, #128	; 0x80
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	429a      	cmp	r2, r3
 80009ae:	d008      	beq.n	80009c2 <LL_TIM_OC_DisableFast+0x3e>
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d101      	bne.n	80009be <LL_TIM_OC_DisableFast+0x3a>
 80009ba:	2305      	movs	r3, #5
 80009bc:	e00a      	b.n	80009d4 <LL_TIM_OC_DisableFast+0x50>
 80009be:	2306      	movs	r3, #6
 80009c0:	e008      	b.n	80009d4 <LL_TIM_OC_DisableFast+0x50>
 80009c2:	2304      	movs	r3, #4
 80009c4:	e006      	b.n	80009d4 <LL_TIM_OC_DisableFast+0x50>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e004      	b.n	80009d4 <LL_TIM_OC_DisableFast+0x50>
 80009ca:	2302      	movs	r3, #2
 80009cc:	e002      	b.n	80009d4 <LL_TIM_OC_DisableFast+0x50>
 80009ce:	2301      	movs	r3, #1
 80009d0:	e000      	b.n	80009d4 <LL_TIM_OC_DisableFast+0x50>
 80009d2:	2300      	movs	r3, #0
 80009d4:	200f      	movs	r0, #15
 80009d6:	183a      	adds	r2, r7, r0
 80009d8:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	3318      	adds	r3, #24
 80009de:	0019      	movs	r1, r3
 80009e0:	183b      	adds	r3, r7, r0
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <LL_TIM_OC_DisableFast+0x8c>)
 80009e6:	5cd3      	ldrb	r3, [r2, r3]
 80009e8:	18cb      	adds	r3, r1, r3
 80009ea:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	183a      	adds	r2, r7, r0
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	4907      	ldr	r1, [pc, #28]	; (8000a14 <LL_TIM_OC_DisableFast+0x90>)
 80009f6:	5c8a      	ldrb	r2, [r1, r2]
 80009f8:	0011      	movs	r1, r2
 80009fa:	2204      	movs	r2, #4
 80009fc:	408a      	lsls	r2, r1
 80009fe:	43d2      	mvns	r2, r2
 8000a00:	401a      	ands	r2, r3
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	601a      	str	r2, [r3, #0]

}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	08002834 	.word	0x08002834
 8000a14:	0800283c 	.word	0x0800283c

08000a18 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d01e      	beq.n	8000a66 <LL_TIM_OC_EnablePreload+0x4e>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	2b04      	cmp	r3, #4
 8000a2c:	d019      	beq.n	8000a62 <LL_TIM_OC_EnablePreload+0x4a>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	2b10      	cmp	r3, #16
 8000a32:	d014      	beq.n	8000a5e <LL_TIM_OC_EnablePreload+0x46>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	2b40      	cmp	r3, #64	; 0x40
 8000a38:	d00f      	beq.n	8000a5a <LL_TIM_OC_EnablePreload+0x42>
 8000a3a:	683a      	ldr	r2, [r7, #0]
 8000a3c:	2380      	movs	r3, #128	; 0x80
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d008      	beq.n	8000a56 <LL_TIM_OC_EnablePreload+0x3e>
 8000a44:	683a      	ldr	r2, [r7, #0]
 8000a46:	2380      	movs	r3, #128	; 0x80
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	d101      	bne.n	8000a52 <LL_TIM_OC_EnablePreload+0x3a>
 8000a4e:	2305      	movs	r3, #5
 8000a50:	e00a      	b.n	8000a68 <LL_TIM_OC_EnablePreload+0x50>
 8000a52:	2306      	movs	r3, #6
 8000a54:	e008      	b.n	8000a68 <LL_TIM_OC_EnablePreload+0x50>
 8000a56:	2304      	movs	r3, #4
 8000a58:	e006      	b.n	8000a68 <LL_TIM_OC_EnablePreload+0x50>
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e004      	b.n	8000a68 <LL_TIM_OC_EnablePreload+0x50>
 8000a5e:	2302      	movs	r3, #2
 8000a60:	e002      	b.n	8000a68 <LL_TIM_OC_EnablePreload+0x50>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <LL_TIM_OC_EnablePreload+0x50>
 8000a66:	2300      	movs	r3, #0
 8000a68:	200f      	movs	r0, #15
 8000a6a:	183a      	adds	r2, r7, r0
 8000a6c:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	3318      	adds	r3, #24
 8000a72:	0019      	movs	r1, r3
 8000a74:	183b      	adds	r3, r7, r0
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <LL_TIM_OC_EnablePreload+0x88>)
 8000a7a:	5cd3      	ldrb	r3, [r2, r3]
 8000a7c:	18cb      	adds	r3, r1, r3
 8000a7e:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	183b      	adds	r3, r7, r0
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <LL_TIM_OC_EnablePreload+0x8c>)
 8000a8a:	5ccb      	ldrb	r3, [r1, r3]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	2308      	movs	r3, #8
 8000a90:	408b      	lsls	r3, r1
 8000a92:	431a      	orrs	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b004      	add	sp, #16
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	08002834 	.word	0x08002834
 8000aa4:	0800283c 	.word	0x0800283c

08000aa8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	2270      	movs	r2, #112	; 0x70
 8000ab8:	4393      	bics	r3, r2
 8000aba:	001a      	movs	r2, r3
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	605a      	str	r2, [r3, #4]
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	4393      	bics	r3, r2
 8000adc:	001a      	movs	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000af2:	253c      	movs	r5, #60	; 0x3c
 8000af4:	197b      	adds	r3, r7, r5
 8000af6:	0018      	movs	r0, r3
 8000af8:	2314      	movs	r3, #20
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f001 fe79 	bl	80027f4 <memset>
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000b02:	241c      	movs	r4, #28
 8000b04:	193b      	adds	r3, r7, r4
 8000b06:	0018      	movs	r0, r3
 8000b08:	2320      	movs	r3, #32
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f001 fe71 	bl	80027f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	0018      	movs	r0, r3
 8000b16:	2318      	movs	r3, #24
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f001 fe6a 	bl	80027f4 <memset>
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8000b20:	2002      	movs	r0, #2
 8000b22:	f7ff fef5 	bl	8000910 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 47;
 8000b26:	197b      	adds	r3, r7, r5
 8000b28:	222f      	movs	r2, #47	; 0x2f
 8000b2a:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b2c:	197b      	adds	r3, r7, r5
 8000b2e:	2200      	movs	r2, #0
 8000b30:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 999;
 8000b32:	197b      	adds	r3, r7, r5
 8000b34:	4a40      	ldr	r2, [pc, #256]	; (8000c38 <MX_TIM3_Init+0x14c>)
 8000b36:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b38:	197b      	adds	r3, r7, r5
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	60da      	str	r2, [r3, #12]
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8000b3e:	197b      	adds	r3, r7, r5
 8000b40:	4a3e      	ldr	r2, [pc, #248]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b42:	0019      	movs	r1, r3
 8000b44:	0010      	movs	r0, r2
 8000b46:	f001 fa69 	bl	800201c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM3);
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f7ff ff0b 	bl	8000968 <LL_TIM_EnableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8000b52:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f7ff ff5e 	bl	8000a18 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000b5c:	193b      	adds	r3, r7, r4
 8000b5e:	2260      	movs	r2, #96	; 0x60
 8000b60:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2200      	movs	r2, #0
 8000b66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000b68:	193b      	adds	r3, r7, r4
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct.CompareValue = 0;
 8000b6e:	193b      	adds	r3, r7, r4
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	2200      	movs	r2, #0
 8000b78:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	482f      	ldr	r0, [pc, #188]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b7e:	001a      	movs	r2, r3
 8000b80:	2101      	movs	r1, #1
 8000b82:	f001 fab9 	bl	80020f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fefa 	bl	8000984 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b92:	2110      	movs	r1, #16
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff ff3f 	bl	8000a18 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8000b9a:	193b      	adds	r3, r7, r4
 8000b9c:	4827      	ldr	r0, [pc, #156]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	f001 faa9 	bl	80020f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000ba8:	2110      	movs	r1, #16
 8000baa:	0018      	movs	r0, r3
 8000bac:	f7ff feea 	bl	8000984 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f7ff ff77 	bl	8000aa8 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <MX_TIM3_Init+0x150>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f7ff ff85 	bl	8000acc <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f7ff fe8c 	bl	80008e4 <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2240      	movs	r2, #64	; 0x40
 8000bd0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2201      	movs	r2, #1
 8000bee:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	1d3a      	adds	r2, r7, #4
 8000bf2:	2390      	movs	r3, #144	; 0x90
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f001 f808 	bl	8001c0e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	2280      	movs	r2, #128	; 0x80
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2202      	movs	r2, #2
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	1d3a      	adds	r2, r7, #4
 8000c24:	2390      	movs	r3, #144	; 0x90
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f000 ffef 	bl	8001c0e <LL_GPIO_Init>

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b014      	add	sp, #80	; 0x50
 8000c36:	bdb0      	pop	{r4, r5, r7, pc}
 8000c38:	000003e7 	.word	0x000003e7
 8000c3c:	40000400 	.word	0x40000400

08000c40 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b086      	sub	sp, #24
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c46:	1d3b      	adds	r3, r7, #4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2314      	movs	r3, #20
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f001 fdd0 	bl	80027f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_TIM17);
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	02db      	lsls	r3, r3, #11
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fe6f 	bl	800093c <LL_APB1_GRP2_EnableClock>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	605a      	str	r2, [r3, #4]
  TIM_InitStruct.Autoreload = 65535;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <MX_TIM17_Init+0x58>)
 8000c6e:	609a      	str	r2, [r3, #8]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]
  TIM_InitStruct.RepetitionCounter = 0;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  LL_TIM_Init(TIM17, &TIM_InitStruct);
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <MX_TIM17_Init+0x5c>)
 8000c80:	0019      	movs	r1, r3
 8000c82:	0010      	movs	r0, r2
 8000c84:	f001 f9ca 	bl	800201c <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM17);
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <MX_TIM17_Init+0x5c>)
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fe6c 	bl	8000968 <LL_TIM_EnableARRPreload>
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b006      	add	sp, #24
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	0000ffff 	.word	0x0000ffff
 8000c9c:	40014800 	.word	0x40014800

08000ca0 <LL_AHB1_GRP1_EnableClock>:
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000caa:	6959      	ldr	r1, [r3, #20]
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000cb4:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <LL_AHB1_GRP1_EnableClock+0x28>)
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	687a      	ldr	r2, [r7, #4]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b004      	add	sp, #16
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40021000 	.word	0x40021000

08000ccc <LL_APB1_GRP2_EnableClock>:
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000cd4:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <LL_APB1_GRP2_EnableClock+0x28>)
 8000cd6:	6999      	ldr	r1, [r3, #24]
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <LL_APB1_GRP2_EnableClock+0x28>)
 8000cda:	687a      	ldr	r2, [r7, #4]
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	619a      	str	r2, [r3, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <LL_APB1_GRP2_EnableClock+0x28>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b004      	add	sp, #16
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2201      	movs	r2, #1
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	601a      	str	r2, [r3, #0]
}
 8000d0c:	46c0      	nop			; (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b002      	add	sp, #8
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  - SCEN (if Smartcard feature is supported), IREN (if Irda feature is supported) and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <LL_USART_ConfigAsyncMode+0x2c>)
 8000d22:	401a      	ands	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4393      	bics	r3, r2
 8000d30:	001a      	movs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	fffff7ff 	.word	0xfffff7ff

08000d44 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d4c:	f3ef 8310 	mrs	r3, PRIMASK
 8000d50:	60bb      	str	r3, [r7, #8]
  return(result);
 8000d52:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	2301      	movs	r3, #1
 8000d58:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f383 8810 	msr	PRIMASK, r3
}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <LL_USART_DisableIT_CTS+0x40>)
 8000d68:	401a      	ands	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	f383 8810 	msr	PRIMASK, r3
}
 8000d78:	46c0      	nop			; (mov r8, r8)
}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	b006      	add	sp, #24
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	fffffbff 	.word	0xfffffbff

08000d88 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b08f      	sub	sp, #60	; 0x3c
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000d8e:	241c      	movs	r4, #28
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	0018      	movs	r0, r3
 8000d94:	231c      	movs	r3, #28
 8000d96:	001a      	movs	r2, r3
 8000d98:	2100      	movs	r1, #0
 8000d9a:	f001 fd2b 	bl	80027f4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	1d3b      	adds	r3, r7, #4
 8000da0:	0018      	movs	r0, r3
 8000da2:	2318      	movs	r3, #24
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f001 fd24 	bl	80027f4 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	01db      	lsls	r3, r3, #7
 8000db0:	0018      	movs	r0, r3
 8000db2:	f7ff ff8b 	bl	8000ccc <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000db6:	2380      	movs	r3, #128	; 0x80
 8000db8:	029b      	lsls	r3, r3, #10
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff ff70 	bl	8000ca0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA2   ------> USART1_TX
  PA3   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2203      	movs	r2, #3
 8000dd0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000dde:	1d3b      	adds	r3, r7, #4
 8000de0:	2201      	movs	r2, #1
 8000de2:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de4:	1d3a      	adds	r2, r7, #4
 8000de6:	2390      	movs	r3, #144	; 0x90
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	0011      	movs	r1, r2
 8000dec:	0018      	movs	r0, r3
 8000dee:	f000 ff0e 	bl	8001c0e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2208      	movs	r2, #8
 8000df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2203      	movs	r2, #3
 8000e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2201      	movs	r2, #1
 8000e14:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e16:	1d3a      	adds	r2, r7, #4
 8000e18:	2390      	movs	r3, #144	; 0x90
 8000e1a:	05db      	lsls	r3, r3, #23
 8000e1c:	0011      	movs	r1, r2
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f000 fef5 	bl	8001c0e <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000e24:	193b      	adds	r3, r7, r4
 8000e26:	22e1      	movs	r2, #225	; 0xe1
 8000e28:	0252      	lsls	r2, r2, #9
 8000e2a:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e2c:	0021      	movs	r1, r4
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	220c      	movs	r2, #12
 8000e44:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <MX_USART1_UART_Init+0xf8>)
 8000e56:	0019      	movs	r1, r3
 8000e58:	0010      	movs	r0, r2
 8000e5a:	f001 fc0d 	bl	8002678 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART1_UART_Init+0xf8>)
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ff6f 	bl	8000d44 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART1_UART_Init+0xf8>)
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff ff53 	bl	8000d14 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <MX_USART1_UART_Init+0xf8>)
 8000e70:	0018      	movs	r0, r3
 8000e72:	f7ff ff41 	bl	8000cf8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b00f      	add	sp, #60	; 0x3c
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	40013800 	.word	0x40013800

08000e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8a:	490e      	ldr	r1, [pc, #56]	; (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e90:	e002      	b.n	8000e98 <LoopCopyDataInit>

08000e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e96:	3304      	adds	r3, #4

08000e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e9c:	d3f9      	bcc.n	8000e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea0:	4c0b      	ldr	r4, [pc, #44]	; (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea4:	e001      	b.n	8000eaa <LoopFillZerobss>

08000ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ea8:	3204      	adds	r2, #4

08000eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eac:	d3fb      	bcc.n	8000ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eae:	f7ff fd14 	bl	80008da <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000eb2:	f001 fc7b 	bl	80027ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff fc63 	bl	8000780 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   r0, =_estack
 8000ebc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ec8:	0800284c 	.word	0x0800284c
  ldr r2, =_sbss
 8000ecc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ed0:	200000b8 	.word	0x200000b8

08000ed4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b07      	ldr	r3, [pc, #28]	; (8000efc <HAL_Init+0x24>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_Init+0x24>)
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f809 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f7ff fcb9 	bl	8000864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	0019      	movs	r1, r3
 8000f12:	23fa      	movs	r3, #250	; 0xfa
 8000f14:	0098      	lsls	r0, r3, #2
 8000f16:	f7ff f8f7 	bl	8000108 <__udivsi3>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	0020      	movs	r0, r4
 8000f20:	f7ff f8f2 	bl	8000108 <__udivsi3>
 8000f24:	0003      	movs	r3, r0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 fb0d 	bl	8001546 <HAL_SYSTICK_Config>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e00f      	b.n	8000f54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d80b      	bhi.n	8000f52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 faea 	bl	800151c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_InitTick+0x64>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b003      	add	sp, #12
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	20000008 	.word	0x20000008
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	18d2      	adds	r2, r2, r3
 8000f78:	4b03      	ldr	r3, [pc, #12]	; (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20000008 	.word	0x20000008
 8000f88:	200000b4 	.word	0x200000b4

08000f8c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f94:	230f      	movs	r3, #15
 8000f96:	18fb      	adds	r3, r7, r3
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e125      	b.n	80011f6 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10a      	bne.n	8000fc8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2234      	movs	r2, #52	; 0x34
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f7ff f994 	bl	80002f0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fcc:	2210      	movs	r2, #16
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d000      	beq.n	8000fd4 <HAL_ADC_Init+0x48>
 8000fd2:	e103      	b.n	80011dc <HAL_ADC_Init+0x250>
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	18fb      	adds	r3, r7, r3
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d000      	beq.n	8000fe0 <HAL_ADC_Init+0x54>
 8000fde:	e0fd      	b.n	80011dc <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	689b      	ldr	r3, [r3, #8]
 8000fe6:	2204      	movs	r2, #4
 8000fe8:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000fea:	d000      	beq.n	8000fee <HAL_ADC_Init+0x62>
 8000fec:	e0f6      	b.n	80011dc <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ff2:	4a83      	ldr	r2, [pc, #524]	; (8001200 <HAL_ADC_Init+0x274>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	2b01      	cmp	r3, #1
 800100a:	d112      	bne.n	8001032 <HAL_ADC_Init+0xa6>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2201      	movs	r2, #1
 8001014:	4013      	ands	r3, r2
 8001016:	2b01      	cmp	r3, #1
 8001018:	d009      	beq.n	800102e <HAL_ADC_Init+0xa2>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68da      	ldr	r2, [r3, #12]
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	401a      	ands	r2, r3
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	429a      	cmp	r2, r3
 800102c:	d101      	bne.n	8001032 <HAL_ADC_Init+0xa6>
 800102e:	2301      	movs	r3, #1
 8001030:	e000      	b.n	8001034 <HAL_ADC_Init+0xa8>
 8001032:	2300      	movs	r3, #0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d116      	bne.n	8001066 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	2218      	movs	r2, #24
 8001040:	4393      	bics	r3, r2
 8001042:	0019      	movs	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	689a      	ldr	r2, [r3, #8]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	430a      	orrs	r2, r1
 800104e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	691b      	ldr	r3, [r3, #16]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	0899      	lsrs	r1, r3, #2
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685a      	ldr	r2, [r3, #4]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	68da      	ldr	r2, [r3, #12]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4964      	ldr	r1, [pc, #400]	; (8001204 <HAL_ADC_Init+0x278>)
 8001072:	400a      	ands	r2, r1
 8001074:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7e1b      	ldrb	r3, [r3, #24]
 800107a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e5b      	ldrb	r3, [r3, #25]
 8001080:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001082:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7e9b      	ldrb	r3, [r3, #26]
 8001088:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800108a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001090:	2b01      	cmp	r3, #1
 8001092:	d002      	beq.n	800109a <HAL_ADC_Init+0x10e>
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	015b      	lsls	r3, r3, #5
 8001098:	e000      	b.n	800109c <HAL_ADC_Init+0x110>
 800109a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800109c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80010a2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d101      	bne.n	80010b0 <HAL_ADC_Init+0x124>
 80010ac:	2304      	movs	r3, #4
 80010ae:	e000      	b.n	80010b2 <HAL_ADC_Init+0x126>
 80010b0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80010b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2124      	movs	r1, #36	; 0x24
 80010b8:	5c5b      	ldrb	r3, [r3, r1]
 80010ba:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80010bc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7edb      	ldrb	r3, [r3, #27]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d115      	bne.n	80010f8 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7e9b      	ldrb	r3, [r3, #26]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d105      	bne.n	80010e0 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	0252      	lsls	r2, r2, #9
 80010da:	4313      	orrs	r3, r2
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	e00b      	b.n	80010f8 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e4:	2220      	movs	r2, #32
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f0:	2201      	movs	r2, #1
 80010f2:	431a      	orrs	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69da      	ldr	r2, [r3, #28]
 80010fc:	23c2      	movs	r3, #194	; 0xc2
 80010fe:	33ff      	adds	r3, #255	; 0xff
 8001100:	429a      	cmp	r2, r3
 8001102:	d007      	beq.n	8001114 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800110c:	4313      	orrs	r3, r2
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4313      	orrs	r3, r2
 8001112:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d9      	ldr	r1, [r3, #12]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	430a      	orrs	r2, r1
 8001122:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001128:	2380      	movs	r3, #128	; 0x80
 800112a:	055b      	lsls	r3, r3, #21
 800112c:	429a      	cmp	r2, r3
 800112e:	d01b      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	2b01      	cmp	r3, #1
 8001136:	d017      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113c:	2b02      	cmp	r3, #2
 800113e:	d013      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001144:	2b03      	cmp	r3, #3
 8001146:	d00f      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b04      	cmp	r3, #4
 800114e:	d00b      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001154:	2b05      	cmp	r3, #5
 8001156:	d007      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800115c:	2b06      	cmp	r3, #6
 800115e:	d003      	beq.n	8001168 <HAL_ADC_Init+0x1dc>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001164:	2b07      	cmp	r3, #7
 8001166:	d112      	bne.n	800118e <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695a      	ldr	r2, [r3, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2107      	movs	r1, #7
 8001174:	438a      	bics	r2, r1
 8001176:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	6959      	ldr	r1, [r3, #20]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001182:	2207      	movs	r2, #7
 8001184:	401a      	ands	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <HAL_ADC_Init+0x27c>)
 8001196:	4013      	ands	r3, r2
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	429a      	cmp	r2, r3
 800119c:	d10b      	bne.n	80011b6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a8:	2203      	movs	r2, #3
 80011aa:	4393      	bics	r3, r2
 80011ac:	2201      	movs	r2, #1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011b4:	e01c      	b.n	80011f0 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	2212      	movs	r2, #18
 80011bc:	4393      	bics	r3, r2
 80011be:	2210      	movs	r2, #16
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011ca:	2201      	movs	r2, #1
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80011d2:	230f      	movs	r3, #15
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	2201      	movs	r2, #1
 80011d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011da:	e009      	b.n	80011f0 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e0:	2210      	movs	r2, #16
 80011e2:	431a      	orrs	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011f0:	230f      	movs	r3, #15
 80011f2:	18fb      	adds	r3, r7, r3
 80011f4:	781b      	ldrb	r3, [r3, #0]
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	fffffefd 	.word	0xfffffefd
 8001204:	fffe0219 	.word	0xfffe0219
 8001208:	833fffe7 	.word	0x833fffe7

0800120c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001216:	230f      	movs	r3, #15
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001226:	2380      	movs	r3, #128	; 0x80
 8001228:	055b      	lsls	r3, r3, #21
 800122a:	429a      	cmp	r2, r3
 800122c:	d011      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x46>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001232:	2b01      	cmp	r3, #1
 8001234:	d00d      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x46>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123a:	2b02      	cmp	r3, #2
 800123c:	d009      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x46>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001242:	2b03      	cmp	r3, #3
 8001244:	d005      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x46>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	2b04      	cmp	r3, #4
 800124c:	d001      	beq.n	8001252 <HAL_ADC_ConfigChannel+0x46>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2234      	movs	r2, #52	; 0x34
 8001256:	5c9b      	ldrb	r3, [r3, r2]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x54>
 800125c:	2302      	movs	r3, #2
 800125e:	e0bb      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x1cc>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2234      	movs	r2, #52	; 0x34
 8001264:	2101      	movs	r1, #1
 8001266:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2204      	movs	r2, #4
 8001270:	4013      	ands	r3, r2
 8001272:	d000      	beq.n	8001276 <HAL_ADC_ConfigChannel+0x6a>
 8001274:	e09f      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a59      	ldr	r2, [pc, #356]	; (80013e0 <HAL_ADC_ConfigChannel+0x1d4>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_ADC_ConfigChannel+0x76>
 8001280:	e077      	b.n	8001372 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	409a      	lsls	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	055b      	lsls	r3, r3, #21
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d037      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d033      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d02f      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d02b      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d027      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c8:	2b05      	cmp	r3, #5
 80012ca:	d023      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d01f      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	2b07      	cmp	r3, #7
 80012da:	d01b      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	2107      	movs	r1, #7
 80012e8:	400b      	ands	r3, r1
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d012      	beq.n	8001314 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2107      	movs	r1, #7
 80012fa:	438a      	bics	r2, r1
 80012fc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6959      	ldr	r1, [r3, #20]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2207      	movs	r2, #7
 800130a:	401a      	ands	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b10      	cmp	r3, #16
 800131a:	d003      	beq.n	8001324 <HAL_ADC_ConfigChannel+0x118>
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b11      	cmp	r3, #17
 8001322:	d152      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001324:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001326:	6819      	ldr	r1, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b10      	cmp	r3, #16
 800132e:	d102      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x12a>
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	041b      	lsls	r3, r3, #16
 8001334:	e001      	b.n	800133a <HAL_ADC_ConfigChannel+0x12e>
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	03db      	lsls	r3, r3, #15
 800133a:	4a2a      	ldr	r2, [pc, #168]	; (80013e4 <HAL_ADC_ConfigChannel+0x1d8>)
 800133c:	430b      	orrs	r3, r1
 800133e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b10      	cmp	r3, #16
 8001346:	d140      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001348:	4b27      	ldr	r3, [pc, #156]	; (80013e8 <HAL_ADC_ConfigChannel+0x1dc>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4927      	ldr	r1, [pc, #156]	; (80013ec <HAL_ADC_ConfigChannel+0x1e0>)
 800134e:	0018      	movs	r0, r3
 8001350:	f7fe feda 	bl	8000108 <__udivsi3>
 8001354:	0003      	movs	r3, r0
 8001356:	001a      	movs	r2, r3
 8001358:	0013      	movs	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	189b      	adds	r3, r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001362:	e002      	b.n	800136a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	3b01      	subs	r3, #1
 8001368:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1f9      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x158>
 8001370:	e02b      	b.n	80013ca <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	4099      	lsls	r1, r3
 8001380:	000b      	movs	r3, r1
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b10      	cmp	r3, #16
 8001392:	d003      	beq.n	800139c <HAL_ADC_ConfigChannel+0x190>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b11      	cmp	r3, #17
 800139a:	d116      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_ADC_ConfigChannel+0x1d8>)
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b10      	cmp	r3, #16
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_ConfigChannel+0x1a0>
 80013a8:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <HAL_ADC_ConfigChannel+0x1e4>)
 80013aa:	e000      	b.n	80013ae <HAL_ADC_ConfigChannel+0x1a2>
 80013ac:	4a11      	ldr	r2, [pc, #68]	; (80013f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_ADC_ConfigChannel+0x1d8>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	e009      	b.n	80013ca <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ba:	2220      	movs	r2, #32
 80013bc:	431a      	orrs	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80013c2:	230f      	movs	r3, #15
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2201      	movs	r2, #1
 80013c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2234      	movs	r2, #52	; 0x34
 80013ce:	2100      	movs	r1, #0
 80013d0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013d2:	230f      	movs	r3, #15
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
}
 80013d8:	0018      	movs	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	b004      	add	sp, #16
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	00001001 	.word	0x00001001
 80013e4:	40012708 	.word	0x40012708
 80013e8:	20000000 	.word	0x20000000
 80013ec:	000f4240 	.word	0x000f4240
 80013f0:	ff7fffff 	.word	0xff7fffff
 80013f4:	ffbfffff 	.word	0xffbfffff

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	0002      	movs	r2, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	1dfb      	adds	r3, r7, #7
 8001404:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001406:	1dfb      	adds	r3, r7, #7
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b7f      	cmp	r3, #127	; 0x7f
 800140c:	d828      	bhi.n	8001460 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140e:	4a2f      	ldr	r2, [pc, #188]	; (80014cc <__NVIC_SetPriority+0xd4>)
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	b25b      	sxtb	r3, r3
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	33c0      	adds	r3, #192	; 0xc0
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	589b      	ldr	r3, [r3, r2]
 800141e:	1dfa      	adds	r2, r7, #7
 8001420:	7812      	ldrb	r2, [r2, #0]
 8001422:	0011      	movs	r1, r2
 8001424:	2203      	movs	r2, #3
 8001426:	400a      	ands	r2, r1
 8001428:	00d2      	lsls	r2, r2, #3
 800142a:	21ff      	movs	r1, #255	; 0xff
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	43d2      	mvns	r2, r2
 8001432:	401a      	ands	r2, r3
 8001434:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	019b      	lsls	r3, r3, #6
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	401a      	ands	r2, r3
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	0018      	movs	r0, r3
 8001444:	2303      	movs	r3, #3
 8001446:	4003      	ands	r3, r0
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800144c:	481f      	ldr	r0, [pc, #124]	; (80014cc <__NVIC_SetPriority+0xd4>)
 800144e:	1dfb      	adds	r3, r7, #7
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b25b      	sxtb	r3, r3
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	430a      	orrs	r2, r1
 8001458:	33c0      	adds	r3, #192	; 0xc0
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800145e:	e031      	b.n	80014c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001460:	4a1b      	ldr	r2, [pc, #108]	; (80014d0 <__NVIC_SetPriority+0xd8>)
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0019      	movs	r1, r3
 8001468:	230f      	movs	r3, #15
 800146a:	400b      	ands	r3, r1
 800146c:	3b08      	subs	r3, #8
 800146e:	089b      	lsrs	r3, r3, #2
 8001470:	3306      	adds	r3, #6
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	18d3      	adds	r3, r2, r3
 8001476:	3304      	adds	r3, #4
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	1dfa      	adds	r2, r7, #7
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	0011      	movs	r1, r2
 8001480:	2203      	movs	r2, #3
 8001482:	400a      	ands	r2, r1
 8001484:	00d2      	lsls	r2, r2, #3
 8001486:	21ff      	movs	r1, #255	; 0xff
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	43d2      	mvns	r2, r2
 800148e:	401a      	ands	r2, r3
 8001490:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	019b      	lsls	r3, r3, #6
 8001496:	22ff      	movs	r2, #255	; 0xff
 8001498:	401a      	ands	r2, r3
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	2303      	movs	r3, #3
 80014a2:	4003      	ands	r3, r0
 80014a4:	00db      	lsls	r3, r3, #3
 80014a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a8:	4809      	ldr	r0, [pc, #36]	; (80014d0 <__NVIC_SetPriority+0xd8>)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	001c      	movs	r4, r3
 80014b0:	230f      	movs	r3, #15
 80014b2:	4023      	ands	r3, r4
 80014b4:	3b08      	subs	r3, #8
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	430a      	orrs	r2, r1
 80014ba:	3306      	adds	r3, #6
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	18c3      	adds	r3, r0, r3
 80014c0:	3304      	adds	r3, #4
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46bd      	mov	sp, r7
 80014c8:	b003      	add	sp, #12
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	1e5a      	subs	r2, r3, #1
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	045b      	lsls	r3, r3, #17
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d301      	bcc.n	80014ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e8:	2301      	movs	r3, #1
 80014ea:	e010      	b.n	800150e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <SysTick_Config+0x44>)
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	3a01      	subs	r2, #1
 80014f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f4:	2301      	movs	r3, #1
 80014f6:	425b      	negs	r3, r3
 80014f8:	2103      	movs	r1, #3
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ff7c 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x44>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x44>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	0018      	movs	r0, r3
 8001510:	46bd      	mov	sp, r7
 8001512:	b002      	add	sp, #8
 8001514:	bd80      	pop	{r7, pc}
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	210f      	movs	r1, #15
 8001528:	187b      	adds	r3, r7, r1
 800152a:	1c02      	adds	r2, r0, #0
 800152c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	187b      	adds	r3, r7, r1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	b25b      	sxtb	r3, r3
 8001536:	0011      	movs	r1, r2
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ffbf 	bl	80014d4 <SysTick_Config>
 8001556:	0003      	movs	r3, r0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e14f      	b.n	8001810 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2101      	movs	r1, #1
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	4013      	ands	r3, r2
 800157e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d100      	bne.n	8001588 <HAL_GPIO_Init+0x28>
 8001586:	e140      	b.n	800180a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	2b01      	cmp	r3, #1
 8001592:	d005      	beq.n	80015a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2203      	movs	r2, #3
 800159a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800159c:	2b02      	cmp	r3, #2
 800159e:	d130      	bne.n	8001602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	2203      	movs	r2, #3
 80015ac:	409a      	lsls	r2, r3
 80015ae:	0013      	movs	r3, r2
 80015b0:	43da      	mvns	r2, r3
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015d6:	2201      	movs	r2, #1
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	2201      	movs	r2, #1
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	4013      	ands	r3, r2
 800160a:	2b03      	cmp	r3, #3
 800160c:	d017      	beq.n	800163e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2203      	movs	r2, #3
 8001644:	4013      	ands	r3, r2
 8001646:	2b02      	cmp	r3, #2
 8001648:	d123      	bne.n	8001692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	08da      	lsrs	r2, r3, #3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3208      	adds	r2, #8
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	58d3      	ldr	r3, [r2, r3]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2207      	movs	r2, #7
 800165c:	4013      	ands	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	220f      	movs	r2, #15
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	43da      	mvns	r2, r3
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	4013      	ands	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	691a      	ldr	r2, [r3, #16]
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2107      	movs	r1, #7
 8001676:	400b      	ands	r3, r1
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	6939      	ldr	r1, [r7, #16]
 8001690:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	2203      	movs	r2, #3
 800169e:	409a      	lsls	r2, r3
 80016a0:	0013      	movs	r3, r2
 80016a2:	43da      	mvns	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2203      	movs	r2, #3
 80016b0:	401a      	ands	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	409a      	lsls	r2, r3
 80016b8:	0013      	movs	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	23c0      	movs	r3, #192	; 0xc0
 80016cc:	029b      	lsls	r3, r3, #10
 80016ce:	4013      	ands	r3, r2
 80016d0:	d100      	bne.n	80016d4 <HAL_GPIO_Init+0x174>
 80016d2:	e09a      	b.n	800180a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d4:	4b54      	ldr	r3, [pc, #336]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80016da:	2101      	movs	r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	619a      	str	r2, [r3, #24]
 80016e0:	4b51      	ldr	r3, [pc, #324]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80016ec:	4a4f      	ldr	r2, [pc, #316]	; (800182c <HAL_GPIO_Init+0x2cc>)
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	089b      	lsrs	r3, r3, #2
 80016f2:	3302      	adds	r3, #2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	589b      	ldr	r3, [r3, r2]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	2203      	movs	r2, #3
 80016fe:	4013      	ands	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	409a      	lsls	r2, r3
 8001706:	0013      	movs	r3, r2
 8001708:	43da      	mvns	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	2390      	movs	r3, #144	; 0x90
 8001714:	05db      	lsls	r3, r3, #23
 8001716:	429a      	cmp	r2, r3
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x1e2>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a44      	ldr	r2, [pc, #272]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x1de>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a43      	ldr	r2, [pc, #268]	; (8001834 <HAL_GPIO_Init+0x2d4>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x1da>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a42      	ldr	r2, [pc, #264]	; (8001838 <HAL_GPIO_Init+0x2d8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x1d6>
 8001732:	2303      	movs	r3, #3
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x1e4>
 8001736:	2305      	movs	r3, #5
 8001738:	e004      	b.n	8001744 <HAL_GPIO_Init+0x1e4>
 800173a:	2302      	movs	r3, #2
 800173c:	e002      	b.n	8001744 <HAL_GPIO_Init+0x1e4>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <HAL_GPIO_Init+0x1e4>
 8001742:	2300      	movs	r3, #0
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	2103      	movs	r1, #3
 8001748:	400a      	ands	r2, r1
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	4093      	lsls	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001754:	4935      	ldr	r1, [pc, #212]	; (800182c <HAL_GPIO_Init+0x2cc>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001762:	4b36      	ldr	r3, [pc, #216]	; (800183c <HAL_GPIO_Init+0x2dc>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	43da      	mvns	r2, r3
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	4013      	ands	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	025b      	lsls	r3, r3, #9
 800177a:	4013      	ands	r3, r2
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001786:	4b2d      	ldr	r3, [pc, #180]	; (800183c <HAL_GPIO_Init+0x2dc>)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <HAL_GPIO_Init+0x2dc>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	029b      	lsls	r3, r3, #10
 80017a4:	4013      	ands	r3, r2
 80017a6:	d003      	beq.n	80017b0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43da      	mvns	r2, r3
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	4013      	ands	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	035b      	lsls	r3, r3, #13
 80017ce:	4013      	ands	r3, r2
 80017d0:	d003      	beq.n	80017da <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017da:	4b18      	ldr	r3, [pc, #96]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80017e0:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43da      	mvns	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	039b      	lsls	r3, r3, #14
 80017f8:	4013      	ands	r3, r2
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_GPIO_Init+0x2dc>)
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	40da      	lsrs	r2, r3
 8001818:	1e13      	subs	r3, r2, #0
 800181a:	d000      	beq.n	800181e <HAL_GPIO_Init+0x2be>
 800181c:	e6a8      	b.n	8001570 <HAL_GPIO_Init+0x10>
  } 
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b006      	add	sp, #24
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40021000 	.word	0x40021000
 800182c:	40010000 	.word	0x40010000
 8001830:	48000400 	.word	0x48000400
 8001834:	48000800 	.word	0x48000800
 8001838:	48000c00 	.word	0x48000c00
 800183c:	40010400 	.word	0x40010400

08001840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e082      	b.n	8001958 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2241      	movs	r2, #65	; 0x41
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d107      	bne.n	800186e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	2100      	movs	r1, #0
 8001864:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	0018      	movs	r0, r3
 800186a:	f7fe fde9 	bl	8000440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2241      	movs	r2, #65	; 0x41
 8001872:	2124      	movs	r1, #36	; 0x24
 8001874:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2101      	movs	r1, #1
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4934      	ldr	r1, [pc, #208]	; (8001960 <HAL_I2C_Init+0x120>)
 8001890:	400a      	ands	r2, r1
 8001892:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4931      	ldr	r1, [pc, #196]	; (8001964 <HAL_I2C_Init+0x124>)
 80018a0:	400a      	ands	r2, r1
 80018a2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d108      	bne.n	80018be <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2180      	movs	r1, #128	; 0x80
 80018b6:	0209      	lsls	r1, r1, #8
 80018b8:	430a      	orrs	r2, r1
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	e007      	b.n	80018ce <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2184      	movs	r1, #132	; 0x84
 80018c8:	0209      	lsls	r1, r1, #8
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d104      	bne.n	80018e0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2280      	movs	r2, #128	; 0x80
 80018dc:	0112      	lsls	r2, r2, #4
 80018de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	491f      	ldr	r1, [pc, #124]	; (8001968 <HAL_I2C_Init+0x128>)
 80018ec:	430a      	orrs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	491a      	ldr	r1, [pc, #104]	; (8001964 <HAL_I2C_Init+0x124>)
 80018fc:	400a      	ands	r2, r1
 80018fe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	431a      	orrs	r2, r3
 800190a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69d9      	ldr	r1, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1a      	ldr	r2, [r3, #32]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2241      	movs	r2, #65	; 0x41
 8001944:	2120      	movs	r1, #32
 8001946:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2242      	movs	r2, #66	; 0x42
 8001952:	2100      	movs	r1, #0
 8001954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	b002      	add	sp, #8
 800195e:	bd80      	pop	{r7, pc}
 8001960:	f0ffffff 	.word	0xf0ffffff
 8001964:	ffff7fff 	.word	0xffff7fff
 8001968:	02008000 	.word	0x02008000

0800196c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2241      	movs	r2, #65	; 0x41
 800197a:	5c9b      	ldrb	r3, [r3, r2]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b20      	cmp	r3, #32
 8001980:	d138      	bne.n	80019f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2240      	movs	r2, #64	; 0x40
 8001986:	5c9b      	ldrb	r3, [r3, r2]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800198c:	2302      	movs	r3, #2
 800198e:	e032      	b.n	80019f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	; 0x40
 8001994:	2101      	movs	r1, #1
 8001996:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2241      	movs	r2, #65	; 0x41
 800199c:	2124      	movs	r1, #36	; 0x24
 800199e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2101      	movs	r1, #1
 80019ac:	438a      	bics	r2, r1
 80019ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4911      	ldr	r1, [pc, #68]	; (8001a00 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6819      	ldr	r1, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2241      	movs	r2, #65	; 0x41
 80019e4:	2120      	movs	r1, #32
 80019e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	2100      	movs	r1, #0
 80019ee:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019f0:	2300      	movs	r3, #0
 80019f2:	e000      	b.n	80019f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019f4:	2302      	movs	r3, #2
  }
}
 80019f6:	0018      	movs	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	ffffefff 	.word	0xffffefff

08001a04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2241      	movs	r2, #65	; 0x41
 8001a12:	5c9b      	ldrb	r3, [r3, r2]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b20      	cmp	r3, #32
 8001a18:	d139      	bne.n	8001a8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2240      	movs	r2, #64	; 0x40
 8001a1e:	5c9b      	ldrb	r3, [r3, r2]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d101      	bne.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e033      	b.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2240      	movs	r2, #64	; 0x40
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2241      	movs	r2, #65	; 0x41
 8001a34:	2124      	movs	r1, #36	; 0x24
 8001a36:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2101      	movs	r1, #1
 8001a44:	438a      	bics	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4a11      	ldr	r2, [pc, #68]	; (8001a98 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	021b      	lsls	r3, r3, #8
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2101      	movs	r1, #1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2241      	movs	r2, #65	; 0x41
 8001a7e:	2120      	movs	r1, #32
 8001a80:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e000      	b.n	8001a90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
  }
}
 8001a90:	0018      	movs	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	fffff0ff 	.word	0xfffff0ff

08001a9c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6819      	ldr	r1, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	435b      	muls	r3, r3
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	189b      	adds	r3, r3, r2
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	400b      	ands	r3, r1
 8001abc:	001a      	movs	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	435b      	muls	r3, r3
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	434b      	muls	r3, r1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b004      	add	sp, #16
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	68ba      	ldr	r2, [r7, #8]
 8001ae6:	43d2      	mvns	r2, r2
 8001ae8:	401a      	ands	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	6879      	ldr	r1, [r7, #4]
 8001aee:	434b      	muls	r3, r1
 8001af0:	431a      	orrs	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	605a      	str	r2, [r3, #4]
}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b004      	add	sp, #16
 8001afc:	bd80      	pop	{r7, pc}

08001afe <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6899      	ldr	r1, [r3, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	435b      	muls	r3, r3
 8001b12:	001a      	movs	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	189b      	adds	r3, r3, r2
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	400b      	ands	r3, r1
 8001b1e:	001a      	movs	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	435b      	muls	r3, r3
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	434b      	muls	r3, r1
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	609a      	str	r2, [r3, #8]
}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	b004      	add	sp, #16
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	60b9      	str	r1, [r7, #8]
 8001b40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	68d9      	ldr	r1, [r3, #12]
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	435b      	muls	r3, r3
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	189b      	adds	r3, r3, r2
 8001b52:	43db      	mvns	r3, r3
 8001b54:	400b      	ands	r3, r1
 8001b56:	001a      	movs	r2, r3
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	435b      	muls	r3, r3
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	434b      	muls	r3, r1
 8001b60:	431a      	orrs	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	60da      	str	r2, [r3, #12]
}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b004      	add	sp, #16
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b084      	sub	sp, #16
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a19      	ldr	r1, [r3, #32]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	435b      	muls	r3, r3
 8001b82:	68ba      	ldr	r2, [r7, #8]
 8001b84:	4353      	muls	r3, r2
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	435a      	muls	r2, r3
 8001b8a:	0013      	movs	r3, r2
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	1a9b      	subs	r3, r3, r2
 8001b90:	43db      	mvns	r3, r3
 8001b92:	400b      	ands	r3, r1
 8001b94:	001a      	movs	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	435b      	muls	r3, r3
 8001b9a:	68b9      	ldr	r1, [r7, #8]
 8001b9c:	434b      	muls	r3, r1
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	434b      	muls	r3, r1
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	434b      	muls	r3, r1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8001bac:	46c0      	nop			; (mov r8, r8)
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b004      	add	sp, #16
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	0a1b      	lsrs	r3, r3, #8
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	0a12      	lsrs	r2, r2, #8
 8001bcc:	4353      	muls	r3, r2
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	0a12      	lsrs	r2, r2, #8
 8001bd2:	4353      	muls	r3, r2
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	0a12      	lsrs	r2, r2, #8
 8001bd8:	435a      	muls	r2, r3
 8001bda:	0013      	movs	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	1a9b      	subs	r3, r3, r2
 8001be0:	43db      	mvns	r3, r3
 8001be2:	400b      	ands	r3, r1
 8001be4:	001a      	movs	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	0a09      	lsrs	r1, r1, #8
 8001bee:	434b      	muls	r3, r1
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	0a09      	lsrs	r1, r1, #8
 8001bf4:	434b      	muls	r3, r1
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	0a09      	lsrs	r1, r1, #8
 8001bfa:	434b      	muls	r3, r1
 8001bfc:	6879      	ldr	r1, [r7, #4]
 8001bfe:	434b      	muls	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8001c06:	46c0      	nop			; (mov r8, r8)
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b004      	add	sp, #16
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c1c:	e048      	b.n	8001cb0 <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2101      	movs	r1, #1
 8001c24:	68fa      	ldr	r2, [r7, #12]
 8001c26:	4091      	lsls	r1, r2
 8001c28:	000a      	movs	r2, r1
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d03a      	beq.n	8001caa <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d003      	beq.n	8001c44 <LL_GPIO_Init+0x36>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d10e      	bne.n	8001c62 <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	68b9      	ldr	r1, [r7, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff ff56 	bl	8001afe <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	6819      	ldr	r1, [r3, #0]
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff ff39 	bl	8001ad4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	68b9      	ldr	r1, [r7, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7ff ff63 	bl	8001b36 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d111      	bne.n	8001c9c <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2bff      	cmp	r3, #255	; 0xff
 8001c7c:	d807      	bhi.n	8001c8e <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	68b9      	ldr	r1, [r7, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7ff ff71 	bl	8001b6e <LL_GPIO_SetAFPin_0_7>
 8001c8c:	e006      	b.n	8001c9c <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	68b9      	ldr	r1, [r7, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	0018      	movs	r0, r3
 8001c98:	f7ff ff8c 	bl	8001bb4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f7ff fef9 	bl	8001a9c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	40da      	lsrs	r2, r3
 8001cb8:	1e13      	subs	r3, r2, #0
 8001cba:	d1b0      	bne.n	8001c1e <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	b004      	add	sp, #16
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <LL_RCC_HSI_IsReady>:
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <LL_RCC_HSI_IsReady+0x1c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	3b02      	subs	r3, #2
 8001cd6:	425a      	negs	r2, r3
 8001cd8:	4153      	adcs	r3, r2
 8001cda:	b2db      	uxtb	r3, r3
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	40021000 	.word	0x40021000

08001ce8 <LL_RCC_LSE_IsReady>:
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <LL_RCC_LSE_IsReady+0x1c>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	3b02      	subs	r3, #2
 8001cf6:	425a      	negs	r2, r3
 8001cf8:	4153      	adcs	r3, r2
 8001cfa:	b2db      	uxtb	r3, r3
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	40021000 	.word	0x40021000

08001d08 <LL_RCC_GetSysClkSource>:
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d0c:	4b03      	ldr	r3, [pc, #12]	; (8001d1c <LL_RCC_GetSysClkSource+0x14>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	220c      	movs	r2, #12
 8001d12:	4013      	ands	r3, r2
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	40021000 	.word	0x40021000

08001d20 <LL_RCC_GetAHBPrescaler>:
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <LL_RCC_GetAHBPrescaler+0x14>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	22f0      	movs	r2, #240	; 0xf0
 8001d2a:	4013      	ands	r3, r2
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	40021000 	.word	0x40021000

08001d38 <LL_RCC_GetAPB1Prescaler>:
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001d3e:	685a      	ldr	r2, [r3, #4]
 8001d40:	23e0      	movs	r3, #224	; 0xe0
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4013      	ands	r3, r2
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000

08001d50 <LL_RCC_GetUSARTClockSource>:
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <LL_RCC_GetUSARTClockSource+0x24>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	2103      	movs	r1, #3
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	4091      	lsls	r1, r2
 8001d62:	000a      	movs	r2, r1
 8001d64:	401a      	ands	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	4313      	orrs	r3, r2
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40021000 	.word	0x40021000

08001d78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <LL_RCC_PLL_GetMainSource+0x14>)
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	2380      	movs	r3, #128	; 0x80
 8001d82:	025b      	lsls	r3, r3, #9
 8001d84:	4013      	ands	r3, r2
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40021000 	.word	0x40021000

08001d90 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	23f0      	movs	r3, #240	; 0xf0
 8001d9a:	039b      	lsls	r3, r3, #14
 8001d9c:	4013      	ands	r3, r2
}
 8001d9e:	0018      	movs	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40021000 	.word	0x40021000

08001da8 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001dac:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <LL_RCC_PLL_GetPrediv+0x14>)
 8001dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db0:	220f      	movs	r2, #15
 8001db2:	4013      	ands	r3, r2
}
 8001db4:	0018      	movs	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	46c0      	nop			; (mov r8, r8)
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d12d      	bne.n	8001e2e <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f7ff ffbb 	bl	8001d50 <LL_RCC_GetUSARTClockSource>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d00a      	beq.n	8001df6 <LL_RCC_GetUSARTClockFreq+0x36>
 8001de0:	d818      	bhi.n	8001e14 <LL_RCC_GetUSARTClockFreq+0x54>
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d002      	beq.n	8001dec <LL_RCC_GetUSARTClockFreq+0x2c>
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d00c      	beq.n	8001e04 <LL_RCC_GetUSARTClockFreq+0x44>
 8001dea:	e013      	b.n	8001e14 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001dec:	f000 f82c 	bl	8001e48 <RCC_GetSystemClockFreq>
 8001df0:	0003      	movs	r3, r0
 8001df2:	60fb      	str	r3, [r7, #12]
        break;
 8001df4:	e020      	b.n	8001e38 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001df6:	f7ff ff67 	bl	8001cc8 <LL_RCC_HSI_IsReady>
 8001dfa:	1e03      	subs	r3, r0, #0
 8001dfc:	d019      	beq.n	8001e32 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <LL_RCC_GetUSARTClockFreq+0x84>)
 8001e00:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e02:	e016      	b.n	8001e32 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001e04:	f7ff ff70 	bl	8001ce8 <LL_RCC_LSE_IsReady>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d014      	beq.n	8001e36 <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e12:	e010      	b.n	8001e36 <LL_RCC_GetUSARTClockFreq+0x76>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e14:	f000 f818 	bl	8001e48 <RCC_GetSystemClockFreq>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f000 f83a 	bl	8001e94 <RCC_GetHCLKClockFreq>
 8001e20:	0003      	movs	r3, r0
 8001e22:	0018      	movs	r0, r3
 8001e24:	f000 f84c 	bl	8001ec0 <RCC_GetPCLK1ClockFreq>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
        break;
 8001e2c:	e004      	b.n	8001e38 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	e002      	b.n	8001e38 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	e000      	b.n	8001e38 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 8001e36:	46c0      	nop			; (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	007a1200 	.word	0x007a1200

08001e48 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001e52:	f7ff ff59 	bl	8001d08 <LL_RCC_GetSysClkSource>
 8001e56:	0003      	movs	r3, r0
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d00b      	beq.n	8001e74 <RCC_GetSystemClockFreq+0x2c>
 8001e5c:	d80f      	bhi.n	8001e7e <RCC_GetSystemClockFreq+0x36>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <RCC_GetSystemClockFreq+0x20>
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d003      	beq.n	8001e6e <RCC_GetSystemClockFreq+0x26>
 8001e66:	e00a      	b.n	8001e7e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <RCC_GetSystemClockFreq+0x48>)
 8001e6a:	607b      	str	r3, [r7, #4]
      break;
 8001e6c:	e00a      	b.n	8001e84 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <RCC_GetSystemClockFreq+0x48>)
 8001e70:	607b      	str	r3, [r7, #4]
      break;
 8001e72:	e007      	b.n	8001e84 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e74:	f000 f838 	bl	8001ee8 <RCC_PLL_GetFreqDomain_SYS>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	607b      	str	r3, [r7, #4]
      break;
 8001e7c:	e002      	b.n	8001e84 <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8001e7e:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <RCC_GetSystemClockFreq+0x48>)
 8001e80:	607b      	str	r3, [r7, #4]
      break;
 8001e82:	46c0      	nop			; (mov r8, r8)
  }

  return frequency;
 8001e84:	687b      	ldr	r3, [r7, #4]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b002      	add	sp, #8
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	007a1200 	.word	0x007a1200

08001e94 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001e9c:	f7ff ff40 	bl	8001d20 <LL_RCC_GetAHBPrescaler>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <RCC_GetHCLKClockFreq+0x28>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	001a      	movs	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	40d3      	lsrs	r3, r2
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b002      	add	sp, #8
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	0800281c 	.word	0x0800281c

08001ec0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001ec8:	f7ff ff36 	bl	8001d38 <LL_RCC_GetAPB1Prescaler>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	0a1b      	lsrs	r3, r3, #8
 8001ed0:	4a04      	ldr	r2, [pc, #16]	; (8001ee4 <RCC_GetPCLK1ClockFreq+0x24>)
 8001ed2:	5cd3      	ldrb	r3, [r2, r3]
 8001ed4:	001a      	movs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	40d3      	lsrs	r3, r2
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	0800282c 	.word	0x0800282c

08001ee8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001ef6:	f7ff ff3f 	bl	8001d78 <LL_RCC_PLL_GetMainSource>
 8001efa:	0003      	movs	r3, r0
 8001efc:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d003      	beq.n	8001f16 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001f0e:	e005      	b.n	8001f1c <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001f10:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001f12:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001f14:	e005      	b.n	8001f22 <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001f16:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001f18:	607b      	str	r3, [r7, #4]
      break;
 8001f1a:	e002      	b.n	8001f22 <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001f1e:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001f20:	46c0      	nop			; (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001f22:	f7ff ff41 	bl	8001da8 <LL_RCC_PLL_GetPrediv>
 8001f26:	0003      	movs	r3, r0
 8001f28:	3301      	adds	r3, #1
 8001f2a:	0019      	movs	r1, r3
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7fe f8eb 	bl	8000108 <__udivsi3>
 8001f32:	0003      	movs	r3, r0
 8001f34:	001c      	movs	r4, r3
 8001f36:	f7ff ff2b 	bl	8001d90 <LL_RCC_PLL_GetMultiplicator>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	0c9b      	lsrs	r3, r3, #18
 8001f3e:	220f      	movs	r2, #15
 8001f40:	4013      	ands	r3, r2
 8001f42:	3302      	adds	r3, #2
 8001f44:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001f46:	0018      	movs	r0, r3
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	b003      	add	sp, #12
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	003d0900 	.word	0x003d0900
 8001f54:	007a1200 	.word	0x007a1200

08001f58 <LL_TIM_SetPrescaler>:
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <LL_TIM_SetAutoReload>:
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <LL_TIM_SetRepetitionCounter>:
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <LL_TIM_OC_SetCompareCH1>:
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LL_TIM_OC_SetCompareCH2>:
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <LL_TIM_OC_SetCompareCH3>:
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001fe0:	46c0      	nop			; (mov r8, r8)
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <LL_TIM_OC_SetCompareCH4>:
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ff8:	46c0      	nop			; (mov r8, r8)
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	2201      	movs	r2, #1
 800200e:	431a      	orrs	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	615a      	str	r2, [r3, #20]
}
 8002014:	46c0      	nop			; (mov r8, r8)
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <LL_TIM_Init+0xc4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d003      	beq.n	800203c <LL_TIM_Init+0x20>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a2b      	ldr	r2, [pc, #172]	; (80020e4 <LL_TIM_Init+0xc8>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d107      	bne.n	800204c <LL_TIM_Init+0x30>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2270      	movs	r2, #112	; 0x70
 8002040:	4393      	bics	r3, r2
 8002042:	001a      	movs	r2, r3
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <LL_TIM_Init+0xc4>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00f      	beq.n	8002074 <LL_TIM_Init+0x58>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a23      	ldr	r2, [pc, #140]	; (80020e4 <LL_TIM_Init+0xc8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d00b      	beq.n	8002074 <LL_TIM_Init+0x58>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a22      	ldr	r2, [pc, #136]	; (80020e8 <LL_TIM_Init+0xcc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d007      	beq.n	8002074 <LL_TIM_Init+0x58>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a21      	ldr	r2, [pc, #132]	; (80020ec <LL_TIM_Init+0xd0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <LL_TIM_Init+0x58>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a20      	ldr	r2, [pc, #128]	; (80020f0 <LL_TIM_Init+0xd4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d106      	bne.n	8002082 <LL_TIM_Init+0x66>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4a1f      	ldr	r2, [pc, #124]	; (80020f4 <LL_TIM_Init+0xd8>)
 8002078:	401a      	ands	r2, r3
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	0011      	movs	r1, r2
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ff6d 	bl	8001f70 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	001a      	movs	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	0011      	movs	r1, r2
 80020a0:	0018      	movs	r0, r3
 80020a2:	f7ff ff59 	bl	8001f58 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a0d      	ldr	r2, [pc, #52]	; (80020e0 <LL_TIM_Init+0xc4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <LL_TIM_Init+0xa2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <LL_TIM_Init+0xd0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d003      	beq.n	80020be <LL_TIM_Init+0xa2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <LL_TIM_Init+0xd4>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d106      	bne.n	80020cc <LL_TIM_Init+0xb0>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f7ff ff5e 	bl	8001f88 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f7ff ff96 	bl	8002000 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b004      	add	sp, #16
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	40012c00 	.word	0x40012c00
 80020e4:	40000400 	.word	0x40000400
 80020e8:	40002000 	.word	0x40002000
 80020ec:	40014400 	.word	0x40014400
 80020f0:	40014800 	.word	0x40014800
 80020f4:	fffffcff 	.word	0xfffffcff

080020f8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80020f8:	b590      	push	{r4, r7, lr}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002104:	2317      	movs	r3, #23
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2201      	movs	r2, #1
 800210a:	701a      	strb	r2, [r3, #0]

  switch (Channel)
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	015b      	lsls	r3, r3, #5
 8002112:	429a      	cmp	r2, r3
 8002114:	d036      	beq.n	8002184 <LL_TIM_OC_Init+0x8c>
 8002116:	68ba      	ldr	r2, [r7, #8]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	015b      	lsls	r3, r3, #5
 800211c:	429a      	cmp	r2, r3
 800211e:	d83c      	bhi.n	800219a <LL_TIM_OC_Init+0xa2>
 8002120:	68ba      	ldr	r2, [r7, #8]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	429a      	cmp	r2, r3
 8002128:	d021      	beq.n	800216e <LL_TIM_OC_Init+0x76>
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	429a      	cmp	r2, r3
 8002132:	d832      	bhi.n	800219a <LL_TIM_OC_Init+0xa2>
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d003      	beq.n	8002142 <LL_TIM_OC_Init+0x4a>
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b10      	cmp	r3, #16
 800213e:	d00b      	beq.n	8002158 <LL_TIM_OC_Init+0x60>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002140:	e02b      	b.n	800219a <LL_TIM_OC_Init+0xa2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002142:	2317      	movs	r3, #23
 8002144:	18fc      	adds	r4, r7, r3
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	0011      	movs	r1, r2
 800214c:	0018      	movs	r0, r3
 800214e:	f000 f82d 	bl	80021ac <OC1Config>
 8002152:	0003      	movs	r3, r0
 8002154:	7023      	strb	r3, [r4, #0]
      break;
 8002156:	e021      	b.n	800219c <LL_TIM_OC_Init+0xa4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002158:	2317      	movs	r3, #23
 800215a:	18fc      	adds	r4, r7, r3
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0011      	movs	r1, r2
 8002162:	0018      	movs	r0, r3
 8002164:	f000 f8a0 	bl	80022a8 <OC2Config>
 8002168:	0003      	movs	r3, r0
 800216a:	7023      	strb	r3, [r4, #0]
      break;
 800216c:	e016      	b.n	800219c <LL_TIM_OC_Init+0xa4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800216e:	2317      	movs	r3, #23
 8002170:	18fc      	adds	r4, r7, r3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	0011      	movs	r1, r2
 8002178:	0018      	movs	r0, r3
 800217a:	f000 f919 	bl	80023b0 <OC3Config>
 800217e:	0003      	movs	r3, r0
 8002180:	7023      	strb	r3, [r4, #0]
      break;
 8002182:	e00b      	b.n	800219c <LL_TIM_OC_Init+0xa4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002184:	2317      	movs	r3, #23
 8002186:	18fc      	adds	r4, r7, r3
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	0011      	movs	r1, r2
 800218e:	0018      	movs	r0, r3
 8002190:	f000 f992 	bl	80024b8 <OC4Config>
 8002194:	0003      	movs	r3, r0
 8002196:	7023      	strb	r3, [r4, #0]
      break;
 8002198:	e000      	b.n	800219c <LL_TIM_OC_Init+0xa4>
      break;
 800219a:	46c0      	nop			; (mov r8, r8)
  }

  return result;
 800219c:	2317      	movs	r3, #23
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	b007      	add	sp, #28
 80021a8:	bd90      	pop	{r4, r7, pc}
	...

080021ac <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4393      	bics	r3, r2
 80021be:	001a      	movs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2203      	movs	r2, #3
 80021da:	4393      	bics	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2270      	movs	r2, #112	; 0x70
 80021e2:	4393      	bics	r3, r2
 80021e4:	001a      	movs	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2202      	movs	r2, #2
 80021f2:	4393      	bics	r3, r2
 80021f4:	001a      	movs	r2, r3
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2201      	movs	r2, #1
 8002202:	4393      	bics	r3, r2
 8002204:	001a      	movs	r2, r3
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a20      	ldr	r2, [pc, #128]	; (8002294 <OC1Config+0xe8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d007      	beq.n	8002226 <OC1Config+0x7a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a1f      	ldr	r2, [pc, #124]	; (8002298 <OC1Config+0xec>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d003      	beq.n	8002226 <OC1Config+0x7a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a1e      	ldr	r2, [pc, #120]	; (800229c <OC1Config+0xf0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d120      	bne.n	8002268 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2208      	movs	r2, #8
 800222a:	4393      	bics	r3, r2
 800222c:	001a      	movs	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4313      	orrs	r3, r2
 8002236:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	2204      	movs	r2, #4
 800223c:	4393      	bics	r3, r2
 800223e:	001a      	movs	r2, r3
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4313      	orrs	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <OC1Config+0xf4>)
 800224e:	401a      	ands	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <OC1Config+0xf8>)
 800225c:	401a      	ands	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	68da      	ldr	r2, [r3, #12]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0011      	movs	r1, r2
 800227c:	0018      	movs	r0, r3
 800227e:	f7ff fe8f 	bl	8001fa0 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b006      	add	sp, #24
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40014400 	.word	0x40014400
 800229c:	40014800 	.word	0x40014800
 80022a0:	fffffeff 	.word	0xfffffeff
 80022a4:	fffffdff 	.word	0xfffffdff

080022a8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	2210      	movs	r2, #16
 80022b8:	4393      	bics	r3, r2
 80022ba:	001a      	movs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a2f      	ldr	r2, [pc, #188]	; (8002394 <OC2Config+0xec>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4a2e      	ldr	r2, [pc, #184]	; (8002398 <OC2Config+0xf0>)
 80022de:	401a      	ands	r2, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2220      	movs	r2, #32
 80022ee:	4393      	bics	r3, r2
 80022f0:	001a      	movs	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2210      	movs	r2, #16
 8002300:	4393      	bics	r3, r2
 8002302:	001a      	movs	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4313      	orrs	r3, r2
 800230c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a22      	ldr	r2, [pc, #136]	; (800239c <OC2Config+0xf4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d007      	beq.n	8002326 <OC2Config+0x7e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a21      	ldr	r2, [pc, #132]	; (80023a0 <OC2Config+0xf8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d003      	beq.n	8002326 <OC2Config+0x7e>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a20      	ldr	r2, [pc, #128]	; (80023a4 <OC2Config+0xfc>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d121      	bne.n	800236a <OC2Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2280      	movs	r2, #128	; 0x80
 800232a:	4393      	bics	r3, r2
 800232c:	001a      	movs	r2, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	019b      	lsls	r3, r3, #6
 8002334:	4313      	orrs	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2240      	movs	r2, #64	; 0x40
 800233c:	4393      	bics	r3, r2
 800233e:	001a      	movs	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	019b      	lsls	r3, r3, #6
 8002346:	4313      	orrs	r3, r2
 8002348:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <OC2Config+0x100>)
 800234e:	401a      	ands	r2, r3
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4a13      	ldr	r2, [pc, #76]	; (80023ac <OC2Config+0x104>)
 800235e:	401a      	ands	r2, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f7ff fe1a 	bl	8001fb8 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800238a:	2300      	movs	r3, #0
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b006      	add	sp, #24
 8002392:	bd80      	pop	{r7, pc}
 8002394:	fffffcff 	.word	0xfffffcff
 8002398:	ffff8fff 	.word	0xffff8fff
 800239c:	40012c00 	.word	0x40012c00
 80023a0:	40014400 	.word	0x40014400
 80023a4:	40014800 	.word	0x40014800
 80023a8:	fffffbff 	.word	0xfffffbff
 80023ac:	fffff7ff 	.word	0xfffff7ff

080023b0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4a35      	ldr	r2, [pc, #212]	; (8002494 <OC3Config+0xe4>)
 80023c0:	401a      	ands	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2203      	movs	r2, #3
 80023dc:	4393      	bics	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2270      	movs	r2, #112	; 0x70
 80023e4:	4393      	bics	r3, r2
 80023e6:	001a      	movs	r2, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4a29      	ldr	r2, [pc, #164]	; (8002498 <OC3Config+0xe8>)
 80023f4:	401a      	ands	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4a24      	ldr	r2, [pc, #144]	; (8002494 <OC3Config+0xe4>)
 8002404:	401a      	ands	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a22      	ldr	r2, [pc, #136]	; (800249c <OC3Config+0xec>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d007      	beq.n	8002428 <OC3Config+0x78>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <OC3Config+0xf0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d003      	beq.n	8002428 <OC3Config+0x78>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a20      	ldr	r2, [pc, #128]	; (80024a4 <OC3Config+0xf4>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d11f      	bne.n	8002468 <OC3Config+0xb8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <OC3Config+0xf8>)
 800242c:	401a      	ands	r2, r3
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	029b      	lsls	r3, r3, #10
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4a1c      	ldr	r2, [pc, #112]	; (80024ac <OC3Config+0xfc>)
 800243c:	401a      	ands	r2, r3
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4313      	orrs	r3, r2
 8002446:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <OC3Config+0x100>)
 800244c:	401a      	ands	r2, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <OC3Config+0x104>)
 800245c:	401a      	ands	r2, r3
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	015b      	lsls	r3, r3, #5
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	0011      	movs	r1, r2
 800247c:	0018      	movs	r0, r3
 800247e:	f7ff fda7 	bl	8001fd0 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002488:	2300      	movs	r3, #0
}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b006      	add	sp, #24
 8002490:	bd80      	pop	{r7, pc}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	fffffeff 	.word	0xfffffeff
 8002498:	fffffdff 	.word	0xfffffdff
 800249c:	40012c00 	.word	0x40012c00
 80024a0:	40014400 	.word	0x40014400
 80024a4:	40014800 	.word	0x40014800
 80024a8:	fffff7ff 	.word	0xfffff7ff
 80024ac:	fffffbff 	.word	0xfffffbff
 80024b0:	ffffefff 	.word	0xffffefff
 80024b4:	ffffdfff 	.word	0xffffdfff

080024b8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a29      	ldr	r2, [pc, #164]	; (800256c <OC4Config+0xb4>)
 80024c8:	401a      	ands	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4a23      	ldr	r2, [pc, #140]	; (8002570 <OC4Config+0xb8>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4a22      	ldr	r2, [pc, #136]	; (8002574 <OC4Config+0xbc>)
 80024ec:	401a      	ands	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	4313      	orrs	r3, r2
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4a1f      	ldr	r2, [pc, #124]	; (8002578 <OC4Config+0xc0>)
 80024fc:	401a      	ands	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	031b      	lsls	r3, r3, #12
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4a18      	ldr	r2, [pc, #96]	; (800256c <OC4Config+0xb4>)
 800250c:	401a      	ands	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	031b      	lsls	r3, r3, #12
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <OC4Config+0xc4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d007      	beq.n	8002530 <OC4Config+0x78>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a17      	ldr	r2, [pc, #92]	; (8002580 <OC4Config+0xc8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d003      	beq.n	8002530 <OC4Config+0x78>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a16      	ldr	r2, [pc, #88]	; (8002584 <OC4Config+0xcc>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d107      	bne.n	8002540 <OC4Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	4a15      	ldr	r2, [pc, #84]	; (8002588 <OC4Config+0xd0>)
 8002534:	401a      	ands	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	019b      	lsls	r3, r3, #6
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68da      	ldr	r2, [r3, #12]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0011      	movs	r1, r2
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fd47 	bl	8001fe8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002560:	2300      	movs	r3, #0
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b006      	add	sp, #24
 8002568:	bd80      	pop	{r7, pc}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	ffffefff 	.word	0xffffefff
 8002570:	fffffcff 	.word	0xfffffcff
 8002574:	ffff8fff 	.word	0xffff8fff
 8002578:	ffffdfff 	.word	0xffffdfff
 800257c:	40012c00 	.word	0x40012c00
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800
 8002588:	ffffbfff 	.word	0xffffbfff

0800258c <LL_USART_IsEnabled>:
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	4013      	ands	r3, r2
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <LL_USART_IsEnabled+0x18>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <LL_USART_IsEnabled+0x1a>
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	0018      	movs	r0, r3
 80025a8:	46bd      	mov	sp, r7
 80025aa:	b002      	add	sp, #8
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <LL_USART_SetStopBitsLength>:
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <LL_USART_SetStopBitsLength+0x24>)
 80025c0:	401a      	ands	r2, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	605a      	str	r2, [r3, #4]
}
 80025ca:	46c0      	nop			; (mov r8, r8)
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	46c0      	nop			; (mov r8, r8)
 80025d4:	ffffcfff 	.word	0xffffcfff

080025d8 <LL_USART_SetHWFlowCtrl>:
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <LL_USART_SetHWFlowCtrl+0x24>)
 80025e8:	401a      	ands	r2, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	431a      	orrs	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	609a      	str	r2, [r3, #8]
}
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	46bd      	mov	sp, r7
 80025f6:	b002      	add	sp, #8
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	fffffcff 	.word	0xfffffcff

08002600 <LL_USART_SetBaudRate>:
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	429a      	cmp	r2, r3
 8002616:	d11c      	bne.n	8002652 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	005a      	lsls	r2, r3, #1
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	18d3      	adds	r3, r2, r3
 8002622:	6839      	ldr	r1, [r7, #0]
 8002624:	0018      	movs	r0, r3
 8002626:	f7fd fd6f 	bl	8000108 <__udivsi3>
 800262a:	0003      	movs	r3, r0
 800262c:	b29b      	uxth	r3, r3
 800262e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4a10      	ldr	r2, [pc, #64]	; (8002674 <LL_USART_SetBaudRate+0x74>)
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	085b      	lsrs	r3, r3, #1
 800263c:	b29b      	uxth	r3, r3
 800263e:	001a      	movs	r2, r3
 8002640:	2307      	movs	r3, #7
 8002642:	4013      	ands	r3, r2
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4313      	orrs	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	60da      	str	r2, [r3, #12]
}
 8002650:	e00c      	b.n	800266c <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	085a      	lsrs	r2, r3, #1
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	18d3      	adds	r3, r2, r3
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	0018      	movs	r0, r3
 800265e:	f7fd fd53 	bl	8000108 <__udivsi3>
 8002662:	0003      	movs	r3, r0
 8002664:	b29b      	uxth	r3, r3
 8002666:	001a      	movs	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	60da      	str	r2, [r3, #12]
}
 800266c:	46c0      	nop			; (mov r8, r8)
 800266e:	46bd      	mov	sp, r7
 8002670:	b006      	add	sp, #24
 8002672:	bd80      	pop	{r7, pc}
 8002674:	0000fff0 	.word	0x0000fff0

08002678 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002682:	230f      	movs	r3, #15
 8002684:	18fb      	adds	r3, r7, r3
 8002686:	2201      	movs	r2, #1
 8002688:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff ff7b 	bl	800258c <LL_USART_IsEnabled>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d13b      	bne.n	8002712 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a20      	ldr	r2, [pc, #128]	; (8002720 <LL_USART_Init+0xa8>)
 80026a0:	401a      	ands	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	4319      	orrs	r1, r3
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	4319      	orrs	r1, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	430b      	orrs	r3, r1
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0011      	movs	r1, r2
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff ff72 	bl	80025b0 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	695a      	ldr	r2, [r3, #20]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	0011      	movs	r1, r2
 80026d4:	0018      	movs	r0, r3
 80026d6:	f7ff ff7f 	bl	80025d8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a11      	ldr	r2, [pc, #68]	; (8002724 <LL_USART_Init+0xac>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d104      	bne.n	80026ec <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80026e2:	2000      	movs	r0, #0
 80026e4:	f7ff fb6c 	bl	8001dc0 <LL_RCC_GetUSARTClockFreq>
 80026e8:	0003      	movs	r3, r0
 80026ea:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00f      	beq.n	8002712 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 80026fa:	230f      	movs	r3, #15
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68b9      	ldr	r1, [r7, #8]
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff77 	bl	8002600 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002712:	230f      	movs	r3, #15
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	781b      	ldrb	r3, [r3, #0]
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	ffff69f3 	.word	0xffff69f3
 8002724:	40013800 	.word	0x40013800

08002728 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <LL_SetSystemCoreClock+0x18>)
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	46bd      	mov	sp, r7
 800273a:	b002      	add	sp, #8
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	20000000 	.word	0x20000000

08002744 <LL_TIM_EnableCounter>:
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	601a      	str	r2, [r3, #0]
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <LL_TIM_CC_EnableChannel>:
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1a      	ldr	r2, [r3, #32]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]
}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b002      	add	sp, #8
 800277c:	bd80      	pop	{r7, pc}
	...

08002780 <Motor_Init>:
#include "motor.h"

void Motor_Init(void) {
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <Motor_Init+0x28>)
 8002786:	2101      	movs	r1, #1
 8002788:	0018      	movs	r0, r3
 800278a:	f7ff ffe9 	bl	8002760 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <Motor_Init+0x28>)
 8002790:	2110      	movs	r1, #16
 8002792:	0018      	movs	r0, r3
 8002794:	f7ff ffe4 	bl	8002760 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM3);
 8002798:	4b03      	ldr	r3, [pc, #12]	; (80027a8 <Motor_Init+0x28>)
 800279a:	0018      	movs	r0, r3
 800279c:	f7ff ffd2 	bl	8002744 <LL_TIM_EnableCounter>
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	40000400 	.word	0x40000400

080027ac <__libc_init_array>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	2600      	movs	r6, #0
 80027b0:	4d0c      	ldr	r5, [pc, #48]	; (80027e4 <__libc_init_array+0x38>)
 80027b2:	4c0d      	ldr	r4, [pc, #52]	; (80027e8 <__libc_init_array+0x3c>)
 80027b4:	1b64      	subs	r4, r4, r5
 80027b6:	10a4      	asrs	r4, r4, #2
 80027b8:	42a6      	cmp	r6, r4
 80027ba:	d109      	bne.n	80027d0 <__libc_init_array+0x24>
 80027bc:	2600      	movs	r6, #0
 80027be:	f000 f821 	bl	8002804 <_init>
 80027c2:	4d0a      	ldr	r5, [pc, #40]	; (80027ec <__libc_init_array+0x40>)
 80027c4:	4c0a      	ldr	r4, [pc, #40]	; (80027f0 <__libc_init_array+0x44>)
 80027c6:	1b64      	subs	r4, r4, r5
 80027c8:	10a4      	asrs	r4, r4, #2
 80027ca:	42a6      	cmp	r6, r4
 80027cc:	d105      	bne.n	80027da <__libc_init_array+0x2e>
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	00b3      	lsls	r3, r6, #2
 80027d2:	58eb      	ldr	r3, [r5, r3]
 80027d4:	4798      	blx	r3
 80027d6:	3601      	adds	r6, #1
 80027d8:	e7ee      	b.n	80027b8 <__libc_init_array+0xc>
 80027da:	00b3      	lsls	r3, r6, #2
 80027dc:	58eb      	ldr	r3, [r5, r3]
 80027de:	4798      	blx	r3
 80027e0:	3601      	adds	r6, #1
 80027e2:	e7f2      	b.n	80027ca <__libc_init_array+0x1e>
 80027e4:	08002844 	.word	0x08002844
 80027e8:	08002844 	.word	0x08002844
 80027ec:	08002844 	.word	0x08002844
 80027f0:	08002848 	.word	0x08002848

080027f4 <memset>:
 80027f4:	0003      	movs	r3, r0
 80027f6:	1882      	adds	r2, r0, r2
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d100      	bne.n	80027fe <memset+0xa>
 80027fc:	4770      	bx	lr
 80027fe:	7019      	strb	r1, [r3, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	e7f9      	b.n	80027f8 <memset+0x4>

08002804 <_init>:
 8002804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800280a:	bc08      	pop	{r3}
 800280c:	469e      	mov	lr, r3
 800280e:	4770      	bx	lr

08002810 <_fini>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr
